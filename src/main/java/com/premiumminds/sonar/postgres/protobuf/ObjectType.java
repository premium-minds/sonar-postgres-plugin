// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pg_query.proto

package com.premiumminds.sonar.postgres.protobuf;

/**
 * Protobuf enum {@code pg_query.ObjectType}
 */
public enum ObjectType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>OBJECT_TYPE_UNDEFINED = 0;</code>
   */
  OBJECT_TYPE_UNDEFINED(0),
  /**
   * <code>OBJECT_ACCESS_METHOD = 1;</code>
   */
  OBJECT_ACCESS_METHOD(1),
  /**
   * <code>OBJECT_AGGREGATE = 2;</code>
   */
  OBJECT_AGGREGATE(2),
  /**
   * <code>OBJECT_AMOP = 3;</code>
   */
  OBJECT_AMOP(3),
  /**
   * <code>OBJECT_AMPROC = 4;</code>
   */
  OBJECT_AMPROC(4),
  /**
   * <code>OBJECT_ATTRIBUTE = 5;</code>
   */
  OBJECT_ATTRIBUTE(5),
  /**
   * <code>OBJECT_CAST = 6;</code>
   */
  OBJECT_CAST(6),
  /**
   * <code>OBJECT_COLUMN = 7;</code>
   */
  OBJECT_COLUMN(7),
  /**
   * <code>OBJECT_COLLATION = 8;</code>
   */
  OBJECT_COLLATION(8),
  /**
   * <code>OBJECT_CONVERSION = 9;</code>
   */
  OBJECT_CONVERSION(9),
  /**
   * <code>OBJECT_DATABASE = 10;</code>
   */
  OBJECT_DATABASE(10),
  /**
   * <code>OBJECT_DEFAULT = 11;</code>
   */
  OBJECT_DEFAULT(11),
  /**
   * <code>OBJECT_DEFACL = 12;</code>
   */
  OBJECT_DEFACL(12),
  /**
   * <code>OBJECT_DOMAIN = 13;</code>
   */
  OBJECT_DOMAIN(13),
  /**
   * <code>OBJECT_DOMCONSTRAINT = 14;</code>
   */
  OBJECT_DOMCONSTRAINT(14),
  /**
   * <code>OBJECT_EVENT_TRIGGER = 15;</code>
   */
  OBJECT_EVENT_TRIGGER(15),
  /**
   * <code>OBJECT_EXTENSION = 16;</code>
   */
  OBJECT_EXTENSION(16),
  /**
   * <code>OBJECT_FDW = 17;</code>
   */
  OBJECT_FDW(17),
  /**
   * <code>OBJECT_FOREIGN_SERVER = 18;</code>
   */
  OBJECT_FOREIGN_SERVER(18),
  /**
   * <code>OBJECT_FOREIGN_TABLE = 19;</code>
   */
  OBJECT_FOREIGN_TABLE(19),
  /**
   * <code>OBJECT_FUNCTION = 20;</code>
   */
  OBJECT_FUNCTION(20),
  /**
   * <code>OBJECT_INDEX = 21;</code>
   */
  OBJECT_INDEX(21),
  /**
   * <code>OBJECT_LANGUAGE = 22;</code>
   */
  OBJECT_LANGUAGE(22),
  /**
   * <code>OBJECT_LARGEOBJECT = 23;</code>
   */
  OBJECT_LARGEOBJECT(23),
  /**
   * <code>OBJECT_MATVIEW = 24;</code>
   */
  OBJECT_MATVIEW(24),
  /**
   * <code>OBJECT_OPCLASS = 25;</code>
   */
  OBJECT_OPCLASS(25),
  /**
   * <code>OBJECT_OPERATOR = 26;</code>
   */
  OBJECT_OPERATOR(26),
  /**
   * <code>OBJECT_OPFAMILY = 27;</code>
   */
  OBJECT_OPFAMILY(27),
  /**
   * <code>OBJECT_PARAMETER_ACL = 28;</code>
   */
  OBJECT_PARAMETER_ACL(28),
  /**
   * <code>OBJECT_POLICY = 29;</code>
   */
  OBJECT_POLICY(29),
  /**
   * <code>OBJECT_PROCEDURE = 30;</code>
   */
  OBJECT_PROCEDURE(30),
  /**
   * <code>OBJECT_PUBLICATION = 31;</code>
   */
  OBJECT_PUBLICATION(31),
  /**
   * <code>OBJECT_PUBLICATION_NAMESPACE = 32;</code>
   */
  OBJECT_PUBLICATION_NAMESPACE(32),
  /**
   * <code>OBJECT_PUBLICATION_REL = 33;</code>
   */
  OBJECT_PUBLICATION_REL(33),
  /**
   * <code>OBJECT_ROLE = 34;</code>
   */
  OBJECT_ROLE(34),
  /**
   * <code>OBJECT_ROUTINE = 35;</code>
   */
  OBJECT_ROUTINE(35),
  /**
   * <code>OBJECT_RULE = 36;</code>
   */
  OBJECT_RULE(36),
  /**
   * <code>OBJECT_SCHEMA = 37;</code>
   */
  OBJECT_SCHEMA(37),
  /**
   * <code>OBJECT_SEQUENCE = 38;</code>
   */
  OBJECT_SEQUENCE(38),
  /**
   * <code>OBJECT_SUBSCRIPTION = 39;</code>
   */
  OBJECT_SUBSCRIPTION(39),
  /**
   * <code>OBJECT_STATISTIC_EXT = 40;</code>
   */
  OBJECT_STATISTIC_EXT(40),
  /**
   * <code>OBJECT_TABCONSTRAINT = 41;</code>
   */
  OBJECT_TABCONSTRAINT(41),
  /**
   * <code>OBJECT_TABLE = 42;</code>
   */
  OBJECT_TABLE(42),
  /**
   * <code>OBJECT_TABLESPACE = 43;</code>
   */
  OBJECT_TABLESPACE(43),
  /**
   * <code>OBJECT_TRANSFORM = 44;</code>
   */
  OBJECT_TRANSFORM(44),
  /**
   * <code>OBJECT_TRIGGER = 45;</code>
   */
  OBJECT_TRIGGER(45),
  /**
   * <code>OBJECT_TSCONFIGURATION = 46;</code>
   */
  OBJECT_TSCONFIGURATION(46),
  /**
   * <code>OBJECT_TSDICTIONARY = 47;</code>
   */
  OBJECT_TSDICTIONARY(47),
  /**
   * <code>OBJECT_TSPARSER = 48;</code>
   */
  OBJECT_TSPARSER(48),
  /**
   * <code>OBJECT_TSTEMPLATE = 49;</code>
   */
  OBJECT_TSTEMPLATE(49),
  /**
   * <code>OBJECT_TYPE = 50;</code>
   */
  OBJECT_TYPE(50),
  /**
   * <code>OBJECT_USER_MAPPING = 51;</code>
   */
  OBJECT_USER_MAPPING(51),
  /**
   * <code>OBJECT_VIEW = 52;</code>
   */
  OBJECT_VIEW(52),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>OBJECT_TYPE_UNDEFINED = 0;</code>
   */
  public static final int OBJECT_TYPE_UNDEFINED_VALUE = 0;
  /**
   * <code>OBJECT_ACCESS_METHOD = 1;</code>
   */
  public static final int OBJECT_ACCESS_METHOD_VALUE = 1;
  /**
   * <code>OBJECT_AGGREGATE = 2;</code>
   */
  public static final int OBJECT_AGGREGATE_VALUE = 2;
  /**
   * <code>OBJECT_AMOP = 3;</code>
   */
  public static final int OBJECT_AMOP_VALUE = 3;
  /**
   * <code>OBJECT_AMPROC = 4;</code>
   */
  public static final int OBJECT_AMPROC_VALUE = 4;
  /**
   * <code>OBJECT_ATTRIBUTE = 5;</code>
   */
  public static final int OBJECT_ATTRIBUTE_VALUE = 5;
  /**
   * <code>OBJECT_CAST = 6;</code>
   */
  public static final int OBJECT_CAST_VALUE = 6;
  /**
   * <code>OBJECT_COLUMN = 7;</code>
   */
  public static final int OBJECT_COLUMN_VALUE = 7;
  /**
   * <code>OBJECT_COLLATION = 8;</code>
   */
  public static final int OBJECT_COLLATION_VALUE = 8;
  /**
   * <code>OBJECT_CONVERSION = 9;</code>
   */
  public static final int OBJECT_CONVERSION_VALUE = 9;
  /**
   * <code>OBJECT_DATABASE = 10;</code>
   */
  public static final int OBJECT_DATABASE_VALUE = 10;
  /**
   * <code>OBJECT_DEFAULT = 11;</code>
   */
  public static final int OBJECT_DEFAULT_VALUE = 11;
  /**
   * <code>OBJECT_DEFACL = 12;</code>
   */
  public static final int OBJECT_DEFACL_VALUE = 12;
  /**
   * <code>OBJECT_DOMAIN = 13;</code>
   */
  public static final int OBJECT_DOMAIN_VALUE = 13;
  /**
   * <code>OBJECT_DOMCONSTRAINT = 14;</code>
   */
  public static final int OBJECT_DOMCONSTRAINT_VALUE = 14;
  /**
   * <code>OBJECT_EVENT_TRIGGER = 15;</code>
   */
  public static final int OBJECT_EVENT_TRIGGER_VALUE = 15;
  /**
   * <code>OBJECT_EXTENSION = 16;</code>
   */
  public static final int OBJECT_EXTENSION_VALUE = 16;
  /**
   * <code>OBJECT_FDW = 17;</code>
   */
  public static final int OBJECT_FDW_VALUE = 17;
  /**
   * <code>OBJECT_FOREIGN_SERVER = 18;</code>
   */
  public static final int OBJECT_FOREIGN_SERVER_VALUE = 18;
  /**
   * <code>OBJECT_FOREIGN_TABLE = 19;</code>
   */
  public static final int OBJECT_FOREIGN_TABLE_VALUE = 19;
  /**
   * <code>OBJECT_FUNCTION = 20;</code>
   */
  public static final int OBJECT_FUNCTION_VALUE = 20;
  /**
   * <code>OBJECT_INDEX = 21;</code>
   */
  public static final int OBJECT_INDEX_VALUE = 21;
  /**
   * <code>OBJECT_LANGUAGE = 22;</code>
   */
  public static final int OBJECT_LANGUAGE_VALUE = 22;
  /**
   * <code>OBJECT_LARGEOBJECT = 23;</code>
   */
  public static final int OBJECT_LARGEOBJECT_VALUE = 23;
  /**
   * <code>OBJECT_MATVIEW = 24;</code>
   */
  public static final int OBJECT_MATVIEW_VALUE = 24;
  /**
   * <code>OBJECT_OPCLASS = 25;</code>
   */
  public static final int OBJECT_OPCLASS_VALUE = 25;
  /**
   * <code>OBJECT_OPERATOR = 26;</code>
   */
  public static final int OBJECT_OPERATOR_VALUE = 26;
  /**
   * <code>OBJECT_OPFAMILY = 27;</code>
   */
  public static final int OBJECT_OPFAMILY_VALUE = 27;
  /**
   * <code>OBJECT_PARAMETER_ACL = 28;</code>
   */
  public static final int OBJECT_PARAMETER_ACL_VALUE = 28;
  /**
   * <code>OBJECT_POLICY = 29;</code>
   */
  public static final int OBJECT_POLICY_VALUE = 29;
  /**
   * <code>OBJECT_PROCEDURE = 30;</code>
   */
  public static final int OBJECT_PROCEDURE_VALUE = 30;
  /**
   * <code>OBJECT_PUBLICATION = 31;</code>
   */
  public static final int OBJECT_PUBLICATION_VALUE = 31;
  /**
   * <code>OBJECT_PUBLICATION_NAMESPACE = 32;</code>
   */
  public static final int OBJECT_PUBLICATION_NAMESPACE_VALUE = 32;
  /**
   * <code>OBJECT_PUBLICATION_REL = 33;</code>
   */
  public static final int OBJECT_PUBLICATION_REL_VALUE = 33;
  /**
   * <code>OBJECT_ROLE = 34;</code>
   */
  public static final int OBJECT_ROLE_VALUE = 34;
  /**
   * <code>OBJECT_ROUTINE = 35;</code>
   */
  public static final int OBJECT_ROUTINE_VALUE = 35;
  /**
   * <code>OBJECT_RULE = 36;</code>
   */
  public static final int OBJECT_RULE_VALUE = 36;
  /**
   * <code>OBJECT_SCHEMA = 37;</code>
   */
  public static final int OBJECT_SCHEMA_VALUE = 37;
  /**
   * <code>OBJECT_SEQUENCE = 38;</code>
   */
  public static final int OBJECT_SEQUENCE_VALUE = 38;
  /**
   * <code>OBJECT_SUBSCRIPTION = 39;</code>
   */
  public static final int OBJECT_SUBSCRIPTION_VALUE = 39;
  /**
   * <code>OBJECT_STATISTIC_EXT = 40;</code>
   */
  public static final int OBJECT_STATISTIC_EXT_VALUE = 40;
  /**
   * <code>OBJECT_TABCONSTRAINT = 41;</code>
   */
  public static final int OBJECT_TABCONSTRAINT_VALUE = 41;
  /**
   * <code>OBJECT_TABLE = 42;</code>
   */
  public static final int OBJECT_TABLE_VALUE = 42;
  /**
   * <code>OBJECT_TABLESPACE = 43;</code>
   */
  public static final int OBJECT_TABLESPACE_VALUE = 43;
  /**
   * <code>OBJECT_TRANSFORM = 44;</code>
   */
  public static final int OBJECT_TRANSFORM_VALUE = 44;
  /**
   * <code>OBJECT_TRIGGER = 45;</code>
   */
  public static final int OBJECT_TRIGGER_VALUE = 45;
  /**
   * <code>OBJECT_TSCONFIGURATION = 46;</code>
   */
  public static final int OBJECT_TSCONFIGURATION_VALUE = 46;
  /**
   * <code>OBJECT_TSDICTIONARY = 47;</code>
   */
  public static final int OBJECT_TSDICTIONARY_VALUE = 47;
  /**
   * <code>OBJECT_TSPARSER = 48;</code>
   */
  public static final int OBJECT_TSPARSER_VALUE = 48;
  /**
   * <code>OBJECT_TSTEMPLATE = 49;</code>
   */
  public static final int OBJECT_TSTEMPLATE_VALUE = 49;
  /**
   * <code>OBJECT_TYPE = 50;</code>
   */
  public static final int OBJECT_TYPE_VALUE = 50;
  /**
   * <code>OBJECT_USER_MAPPING = 51;</code>
   */
  public static final int OBJECT_USER_MAPPING_VALUE = 51;
  /**
   * <code>OBJECT_VIEW = 52;</code>
   */
  public static final int OBJECT_VIEW_VALUE = 52;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ObjectType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ObjectType forNumber(int value) {
    switch (value) {
      case 0: return OBJECT_TYPE_UNDEFINED;
      case 1: return OBJECT_ACCESS_METHOD;
      case 2: return OBJECT_AGGREGATE;
      case 3: return OBJECT_AMOP;
      case 4: return OBJECT_AMPROC;
      case 5: return OBJECT_ATTRIBUTE;
      case 6: return OBJECT_CAST;
      case 7: return OBJECT_COLUMN;
      case 8: return OBJECT_COLLATION;
      case 9: return OBJECT_CONVERSION;
      case 10: return OBJECT_DATABASE;
      case 11: return OBJECT_DEFAULT;
      case 12: return OBJECT_DEFACL;
      case 13: return OBJECT_DOMAIN;
      case 14: return OBJECT_DOMCONSTRAINT;
      case 15: return OBJECT_EVENT_TRIGGER;
      case 16: return OBJECT_EXTENSION;
      case 17: return OBJECT_FDW;
      case 18: return OBJECT_FOREIGN_SERVER;
      case 19: return OBJECT_FOREIGN_TABLE;
      case 20: return OBJECT_FUNCTION;
      case 21: return OBJECT_INDEX;
      case 22: return OBJECT_LANGUAGE;
      case 23: return OBJECT_LARGEOBJECT;
      case 24: return OBJECT_MATVIEW;
      case 25: return OBJECT_OPCLASS;
      case 26: return OBJECT_OPERATOR;
      case 27: return OBJECT_OPFAMILY;
      case 28: return OBJECT_PARAMETER_ACL;
      case 29: return OBJECT_POLICY;
      case 30: return OBJECT_PROCEDURE;
      case 31: return OBJECT_PUBLICATION;
      case 32: return OBJECT_PUBLICATION_NAMESPACE;
      case 33: return OBJECT_PUBLICATION_REL;
      case 34: return OBJECT_ROLE;
      case 35: return OBJECT_ROUTINE;
      case 36: return OBJECT_RULE;
      case 37: return OBJECT_SCHEMA;
      case 38: return OBJECT_SEQUENCE;
      case 39: return OBJECT_SUBSCRIPTION;
      case 40: return OBJECT_STATISTIC_EXT;
      case 41: return OBJECT_TABCONSTRAINT;
      case 42: return OBJECT_TABLE;
      case 43: return OBJECT_TABLESPACE;
      case 44: return OBJECT_TRANSFORM;
      case 45: return OBJECT_TRIGGER;
      case 46: return OBJECT_TSCONFIGURATION;
      case 47: return OBJECT_TSDICTIONARY;
      case 48: return OBJECT_TSPARSER;
      case 49: return OBJECT_TSTEMPLATE;
      case 50: return OBJECT_TYPE;
      case 51: return OBJECT_USER_MAPPING;
      case 52: return OBJECT_VIEW;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ObjectType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ObjectType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ObjectType>() {
          public ObjectType findValueByNumber(int number) {
            return ObjectType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.premiumminds.sonar.postgres.protobuf.PgQuery.getDescriptor().getEnumTypes().get(16);
  }

  private static final ObjectType[] VALUES = values();

  public static ObjectType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ObjectType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:pg_query.ObjectType)
}

