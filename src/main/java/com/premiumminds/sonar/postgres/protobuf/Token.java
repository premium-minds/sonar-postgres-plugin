// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pg_query.proto

package com.premiumminds.sonar.postgres.protobuf;

/**
 * Protobuf enum {@code pg_query.Token}
 */
public enum Token
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>NUL = 0;</code>
   */
  NUL(0),
  /**
   * <pre>
   * Single-character tokens that are returned 1:1 (identical with "self" list in scan.l)
   * Either supporting syntax, or single-character operators (some can be both)
   * Also see https://www.postgresql.org/docs/12/sql-syntax-lexical.html#SQL-SYNTAX-SPECIAL-CHARS
   * </pre>
   *
   * <code>ASCII_36 = 36;</code>
   */
  ASCII_36(36),
  /**
   * <pre>
   * "%"
   * </pre>
   *
   * <code>ASCII_37 = 37;</code>
   */
  ASCII_37(37),
  /**
   * <pre>
   * "("
   * </pre>
   *
   * <code>ASCII_40 = 40;</code>
   */
  ASCII_40(40),
  /**
   * <pre>
   * ")"
   * </pre>
   *
   * <code>ASCII_41 = 41;</code>
   */
  ASCII_41(41),
  /**
   * <pre>
   * "*"
   * </pre>
   *
   * <code>ASCII_42 = 42;</code>
   */
  ASCII_42(42),
  /**
   * <pre>
   * "+"
   * </pre>
   *
   * <code>ASCII_43 = 43;</code>
   */
  ASCII_43(43),
  /**
   * <pre>
   * ","
   * </pre>
   *
   * <code>ASCII_44 = 44;</code>
   */
  ASCII_44(44),
  /**
   * <pre>
   * "-"
   * </pre>
   *
   * <code>ASCII_45 = 45;</code>
   */
  ASCII_45(45),
  /**
   * <pre>
   * "."
   * </pre>
   *
   * <code>ASCII_46 = 46;</code>
   */
  ASCII_46(46),
  /**
   * <pre>
   * "/"
   * </pre>
   *
   * <code>ASCII_47 = 47;</code>
   */
  ASCII_47(47),
  /**
   * <pre>
   * ":"
   * </pre>
   *
   * <code>ASCII_58 = 58;</code>
   */
  ASCII_58(58),
  /**
   * <pre>
   * ";"
   * </pre>
   *
   * <code>ASCII_59 = 59;</code>
   */
  ASCII_59(59),
  /**
   * <pre>
   * "&lt;"
   * </pre>
   *
   * <code>ASCII_60 = 60;</code>
   */
  ASCII_60(60),
  /**
   * <pre>
   * "="
   * </pre>
   *
   * <code>ASCII_61 = 61;</code>
   */
  ASCII_61(61),
  /**
   * <pre>
   * "&gt;"
   * </pre>
   *
   * <code>ASCII_62 = 62;</code>
   */
  ASCII_62(62),
  /**
   * <pre>
   * "?"
   * </pre>
   *
   * <code>ASCII_63 = 63;</code>
   */
  ASCII_63(63),
  /**
   * <pre>
   * "["
   * </pre>
   *
   * <code>ASCII_91 = 91;</code>
   */
  ASCII_91(91),
  /**
   * <pre>
   * "&#92;"
   * </pre>
   *
   * <code>ASCII_92 = 92;</code>
   */
  ASCII_92(92),
  /**
   * <pre>
   * "]"
   * </pre>
   *
   * <code>ASCII_93 = 93;</code>
   */
  ASCII_93(93),
  /**
   * <pre>
   * "^"
   * </pre>
   *
   * <code>ASCII_94 = 94;</code>
   */
  ASCII_94(94),
  /**
   * <pre>
   * Named tokens in scan.l
   * </pre>
   *
   * <code>IDENT = 258;</code>
   */
  IDENT(258),
  /**
   * <code>UIDENT = 259;</code>
   */
  UIDENT(259),
  /**
   * <code>FCONST = 260;</code>
   */
  FCONST(260),
  /**
   * <code>SCONST = 261;</code>
   */
  SCONST(261),
  /**
   * <code>USCONST = 262;</code>
   */
  USCONST(262),
  /**
   * <code>BCONST = 263;</code>
   */
  BCONST(263),
  /**
   * <code>XCONST = 264;</code>
   */
  XCONST(264),
  /**
   * <code>Op = 265;</code>
   */
  Op(265),
  /**
   * <code>ICONST = 266;</code>
   */
  ICONST(266),
  /**
   * <code>PARAM = 267;</code>
   */
  PARAM(267),
  /**
   * <code>TYPECAST = 268;</code>
   */
  TYPECAST(268),
  /**
   * <code>DOT_DOT = 269;</code>
   */
  DOT_DOT(269),
  /**
   * <code>COLON_EQUALS = 270;</code>
   */
  COLON_EQUALS(270),
  /**
   * <code>EQUALS_GREATER = 271;</code>
   */
  EQUALS_GREATER(271),
  /**
   * <code>LESS_EQUALS = 272;</code>
   */
  LESS_EQUALS(272),
  /**
   * <code>GREATER_EQUALS = 273;</code>
   */
  GREATER_EQUALS(273),
  /**
   * <code>NOT_EQUALS = 274;</code>
   */
  NOT_EQUALS(274),
  /**
   * <code>SQL_COMMENT = 275;</code>
   */
  SQL_COMMENT(275),
  /**
   * <code>C_COMMENT = 276;</code>
   */
  C_COMMENT(276),
  /**
   * <code>ABORT_P = 277;</code>
   */
  ABORT_P(277),
  /**
   * <code>ABSENT = 278;</code>
   */
  ABSENT(278),
  /**
   * <code>ABSOLUTE_P = 279;</code>
   */
  ABSOLUTE_P(279),
  /**
   * <code>ACCESS = 280;</code>
   */
  ACCESS(280),
  /**
   * <code>ACTION = 281;</code>
   */
  ACTION(281),
  /**
   * <code>ADD_P = 282;</code>
   */
  ADD_P(282),
  /**
   * <code>ADMIN = 283;</code>
   */
  ADMIN(283),
  /**
   * <code>AFTER = 284;</code>
   */
  AFTER(284),
  /**
   * <code>AGGREGATE = 285;</code>
   */
  AGGREGATE(285),
  /**
   * <code>ALL = 286;</code>
   */
  ALL(286),
  /**
   * <code>ALSO = 287;</code>
   */
  ALSO(287),
  /**
   * <code>ALTER = 288;</code>
   */
  ALTER(288),
  /**
   * <code>ALWAYS = 289;</code>
   */
  ALWAYS(289),
  /**
   * <code>ANALYSE = 290;</code>
   */
  ANALYSE(290),
  /**
   * <code>ANALYZE = 291;</code>
   */
  ANALYZE(291),
  /**
   * <code>AND = 292;</code>
   */
  AND(292),
  /**
   * <code>ANY = 293;</code>
   */
  ANY(293),
  /**
   * <code>ARRAY = 294;</code>
   */
  ARRAY(294),
  /**
   * <code>AS = 295;</code>
   */
  AS(295),
  /**
   * <code>ASC = 296;</code>
   */
  ASC(296),
  /**
   * <code>ASENSITIVE = 297;</code>
   */
  ASENSITIVE(297),
  /**
   * <code>ASSERTION = 298;</code>
   */
  ASSERTION(298),
  /**
   * <code>ASSIGNMENT = 299;</code>
   */
  ASSIGNMENT(299),
  /**
   * <code>ASYMMETRIC = 300;</code>
   */
  ASYMMETRIC(300),
  /**
   * <code>ATOMIC = 301;</code>
   */
  ATOMIC(301),
  /**
   * <code>AT = 302;</code>
   */
  AT(302),
  /**
   * <code>ATTACH = 303;</code>
   */
  ATTACH(303),
  /**
   * <code>ATTRIBUTE = 304;</code>
   */
  ATTRIBUTE(304),
  /**
   * <code>AUTHORIZATION = 305;</code>
   */
  AUTHORIZATION(305),
  /**
   * <code>BACKWARD = 306;</code>
   */
  BACKWARD(306),
  /**
   * <code>BEFORE = 307;</code>
   */
  BEFORE(307),
  /**
   * <code>BEGIN_P = 308;</code>
   */
  BEGIN_P(308),
  /**
   * <code>BETWEEN = 309;</code>
   */
  BETWEEN(309),
  /**
   * <code>BIGINT = 310;</code>
   */
  BIGINT(310),
  /**
   * <code>BINARY = 311;</code>
   */
  BINARY(311),
  /**
   * <code>BIT = 312;</code>
   */
  BIT(312),
  /**
   * <code>BOOLEAN_P = 313;</code>
   */
  BOOLEAN_P(313),
  /**
   * <code>BOTH = 314;</code>
   */
  BOTH(314),
  /**
   * <code>BREADTH = 315;</code>
   */
  BREADTH(315),
  /**
   * <code>BY = 316;</code>
   */
  BY(316),
  /**
   * <code>CACHE = 317;</code>
   */
  CACHE(317),
  /**
   * <code>CALL = 318;</code>
   */
  CALL(318),
  /**
   * <code>CALLED = 319;</code>
   */
  CALLED(319),
  /**
   * <code>CASCADE = 320;</code>
   */
  CASCADE(320),
  /**
   * <code>CASCADED = 321;</code>
   */
  CASCADED(321),
  /**
   * <code>CASE = 322;</code>
   */
  CASE(322),
  /**
   * <code>CAST = 323;</code>
   */
  CAST(323),
  /**
   * <code>CATALOG_P = 324;</code>
   */
  CATALOG_P(324),
  /**
   * <code>CHAIN = 325;</code>
   */
  CHAIN(325),
  /**
   * <code>CHAR_P = 326;</code>
   */
  CHAR_P(326),
  /**
   * <code>CHARACTER = 327;</code>
   */
  CHARACTER(327),
  /**
   * <code>CHARACTERISTICS = 328;</code>
   */
  CHARACTERISTICS(328),
  /**
   * <code>CHECK = 329;</code>
   */
  CHECK(329),
  /**
   * <code>CHECKPOINT = 330;</code>
   */
  CHECKPOINT(330),
  /**
   * <code>CLASS = 331;</code>
   */
  CLASS(331),
  /**
   * <code>CLOSE = 332;</code>
   */
  CLOSE(332),
  /**
   * <code>CLUSTER = 333;</code>
   */
  CLUSTER(333),
  /**
   * <code>COALESCE = 334;</code>
   */
  COALESCE(334),
  /**
   * <code>COLLATE = 335;</code>
   */
  COLLATE(335),
  /**
   * <code>COLLATION = 336;</code>
   */
  COLLATION(336),
  /**
   * <code>COLUMN = 337;</code>
   */
  COLUMN(337),
  /**
   * <code>COLUMNS = 338;</code>
   */
  COLUMNS(338),
  /**
   * <code>COMMENT = 339;</code>
   */
  COMMENT(339),
  /**
   * <code>COMMENTS = 340;</code>
   */
  COMMENTS(340),
  /**
   * <code>COMMIT = 341;</code>
   */
  COMMIT(341),
  /**
   * <code>COMMITTED = 342;</code>
   */
  COMMITTED(342),
  /**
   * <code>COMPRESSION = 343;</code>
   */
  COMPRESSION(343),
  /**
   * <code>CONCURRENTLY = 344;</code>
   */
  CONCURRENTLY(344),
  /**
   * <code>CONFIGURATION = 345;</code>
   */
  CONFIGURATION(345),
  /**
   * <code>CONFLICT = 346;</code>
   */
  CONFLICT(346),
  /**
   * <code>CONNECTION = 347;</code>
   */
  CONNECTION(347),
  /**
   * <code>CONSTRAINT = 348;</code>
   */
  CONSTRAINT(348),
  /**
   * <code>CONSTRAINTS = 349;</code>
   */
  CONSTRAINTS(349),
  /**
   * <code>CONTENT_P = 350;</code>
   */
  CONTENT_P(350),
  /**
   * <code>CONTINUE_P = 351;</code>
   */
  CONTINUE_P(351),
  /**
   * <code>CONVERSION_P = 352;</code>
   */
  CONVERSION_P(352),
  /**
   * <code>COPY = 353;</code>
   */
  COPY(353),
  /**
   * <code>COST = 354;</code>
   */
  COST(354),
  /**
   * <code>CREATE = 355;</code>
   */
  CREATE(355),
  /**
   * <code>CROSS = 356;</code>
   */
  CROSS(356),
  /**
   * <code>CSV = 357;</code>
   */
  CSV(357),
  /**
   * <code>CUBE = 358;</code>
   */
  CUBE(358),
  /**
   * <code>CURRENT_P = 359;</code>
   */
  CURRENT_P(359),
  /**
   * <code>CURRENT_CATALOG = 360;</code>
   */
  CURRENT_CATALOG(360),
  /**
   * <code>CURRENT_DATE = 361;</code>
   */
  CURRENT_DATE(361),
  /**
   * <code>CURRENT_ROLE = 362;</code>
   */
  CURRENT_ROLE(362),
  /**
   * <code>CURRENT_SCHEMA = 363;</code>
   */
  CURRENT_SCHEMA(363),
  /**
   * <code>CURRENT_TIME = 364;</code>
   */
  CURRENT_TIME(364),
  /**
   * <code>CURRENT_TIMESTAMP = 365;</code>
   */
  CURRENT_TIMESTAMP(365),
  /**
   * <code>CURRENT_USER = 366;</code>
   */
  CURRENT_USER(366),
  /**
   * <code>CURSOR = 367;</code>
   */
  CURSOR(367),
  /**
   * <code>CYCLE = 368;</code>
   */
  CYCLE(368),
  /**
   * <code>DATA_P = 369;</code>
   */
  DATA_P(369),
  /**
   * <code>DATABASE = 370;</code>
   */
  DATABASE(370),
  /**
   * <code>DAY_P = 371;</code>
   */
  DAY_P(371),
  /**
   * <code>DEALLOCATE = 372;</code>
   */
  DEALLOCATE(372),
  /**
   * <code>DEC = 373;</code>
   */
  DEC(373),
  /**
   * <code>DECIMAL_P = 374;</code>
   */
  DECIMAL_P(374),
  /**
   * <code>DECLARE = 375;</code>
   */
  DECLARE(375),
  /**
   * <code>DEFAULT = 376;</code>
   */
  DEFAULT(376),
  /**
   * <code>DEFAULTS = 377;</code>
   */
  DEFAULTS(377),
  /**
   * <code>DEFERRABLE = 378;</code>
   */
  DEFERRABLE(378),
  /**
   * <code>DEFERRED = 379;</code>
   */
  DEFERRED(379),
  /**
   * <code>DEFINER = 380;</code>
   */
  DEFINER(380),
  /**
   * <code>DELETE_P = 381;</code>
   */
  DELETE_P(381),
  /**
   * <code>DELIMITER = 382;</code>
   */
  DELIMITER(382),
  /**
   * <code>DELIMITERS = 383;</code>
   */
  DELIMITERS(383),
  /**
   * <code>DEPENDS = 384;</code>
   */
  DEPENDS(384),
  /**
   * <code>DEPTH = 385;</code>
   */
  DEPTH(385),
  /**
   * <code>DESC = 386;</code>
   */
  DESC(386),
  /**
   * <code>DETACH = 387;</code>
   */
  DETACH(387),
  /**
   * <code>DICTIONARY = 388;</code>
   */
  DICTIONARY(388),
  /**
   * <code>DISABLE_P = 389;</code>
   */
  DISABLE_P(389),
  /**
   * <code>DISCARD = 390;</code>
   */
  DISCARD(390),
  /**
   * <code>DISTINCT = 391;</code>
   */
  DISTINCT(391),
  /**
   * <code>DO = 392;</code>
   */
  DO(392),
  /**
   * <code>DOCUMENT_P = 393;</code>
   */
  DOCUMENT_P(393),
  /**
   * <code>DOMAIN_P = 394;</code>
   */
  DOMAIN_P(394),
  /**
   * <code>DOUBLE_P = 395;</code>
   */
  DOUBLE_P(395),
  /**
   * <code>DROP = 396;</code>
   */
  DROP(396),
  /**
   * <code>EACH = 397;</code>
   */
  EACH(397),
  /**
   * <code>ELSE = 398;</code>
   */
  ELSE(398),
  /**
   * <code>ENABLE_P = 399;</code>
   */
  ENABLE_P(399),
  /**
   * <code>ENCODING = 400;</code>
   */
  ENCODING(400),
  /**
   * <code>ENCRYPTED = 401;</code>
   */
  ENCRYPTED(401),
  /**
   * <code>END_P = 402;</code>
   */
  END_P(402),
  /**
   * <code>ENUM_P = 403;</code>
   */
  ENUM_P(403),
  /**
   * <code>ESCAPE = 404;</code>
   */
  ESCAPE(404),
  /**
   * <code>EVENT = 405;</code>
   */
  EVENT(405),
  /**
   * <code>EXCEPT = 406;</code>
   */
  EXCEPT(406),
  /**
   * <code>EXCLUDE = 407;</code>
   */
  EXCLUDE(407),
  /**
   * <code>EXCLUDING = 408;</code>
   */
  EXCLUDING(408),
  /**
   * <code>EXCLUSIVE = 409;</code>
   */
  EXCLUSIVE(409),
  /**
   * <code>EXECUTE = 410;</code>
   */
  EXECUTE(410),
  /**
   * <code>EXISTS = 411;</code>
   */
  EXISTS(411),
  /**
   * <code>EXPLAIN = 412;</code>
   */
  EXPLAIN(412),
  /**
   * <code>EXPRESSION = 413;</code>
   */
  EXPRESSION(413),
  /**
   * <code>EXTENSION = 414;</code>
   */
  EXTENSION(414),
  /**
   * <code>EXTERNAL = 415;</code>
   */
  EXTERNAL(415),
  /**
   * <code>EXTRACT = 416;</code>
   */
  EXTRACT(416),
  /**
   * <code>FALSE_P = 417;</code>
   */
  FALSE_P(417),
  /**
   * <code>FAMILY = 418;</code>
   */
  FAMILY(418),
  /**
   * <code>FETCH = 419;</code>
   */
  FETCH(419),
  /**
   * <code>FILTER = 420;</code>
   */
  FILTER(420),
  /**
   * <code>FINALIZE = 421;</code>
   */
  FINALIZE(421),
  /**
   * <code>FIRST_P = 422;</code>
   */
  FIRST_P(422),
  /**
   * <code>FLOAT_P = 423;</code>
   */
  FLOAT_P(423),
  /**
   * <code>FOLLOWING = 424;</code>
   */
  FOLLOWING(424),
  /**
   * <code>FOR = 425;</code>
   */
  FOR(425),
  /**
   * <code>FORCE = 426;</code>
   */
  FORCE(426),
  /**
   * <code>FOREIGN = 427;</code>
   */
  FOREIGN(427),
  /**
   * <code>FORMAT = 428;</code>
   */
  FORMAT(428),
  /**
   * <code>FORWARD = 429;</code>
   */
  FORWARD(429),
  /**
   * <code>FREEZE = 430;</code>
   */
  FREEZE(430),
  /**
   * <code>FROM = 431;</code>
   */
  FROM(431),
  /**
   * <code>FULL = 432;</code>
   */
  FULL(432),
  /**
   * <code>FUNCTION = 433;</code>
   */
  FUNCTION(433),
  /**
   * <code>FUNCTIONS = 434;</code>
   */
  FUNCTIONS(434),
  /**
   * <code>GENERATED = 435;</code>
   */
  GENERATED(435),
  /**
   * <code>GLOBAL = 436;</code>
   */
  GLOBAL(436),
  /**
   * <code>GRANT = 437;</code>
   */
  GRANT(437),
  /**
   * <code>GRANTED = 438;</code>
   */
  GRANTED(438),
  /**
   * <code>GREATEST = 439;</code>
   */
  GREATEST(439),
  /**
   * <code>GROUP_P = 440;</code>
   */
  GROUP_P(440),
  /**
   * <code>GROUPING = 441;</code>
   */
  GROUPING(441),
  /**
   * <code>GROUPS = 442;</code>
   */
  GROUPS(442),
  /**
   * <code>HANDLER = 443;</code>
   */
  HANDLER(443),
  /**
   * <code>HAVING = 444;</code>
   */
  HAVING(444),
  /**
   * <code>HEADER_P = 445;</code>
   */
  HEADER_P(445),
  /**
   * <code>HOLD = 446;</code>
   */
  HOLD(446),
  /**
   * <code>HOUR_P = 447;</code>
   */
  HOUR_P(447),
  /**
   * <code>IDENTITY_P = 448;</code>
   */
  IDENTITY_P(448),
  /**
   * <code>IF_P = 449;</code>
   */
  IF_P(449),
  /**
   * <code>ILIKE = 450;</code>
   */
  ILIKE(450),
  /**
   * <code>IMMEDIATE = 451;</code>
   */
  IMMEDIATE(451),
  /**
   * <code>IMMUTABLE = 452;</code>
   */
  IMMUTABLE(452),
  /**
   * <code>IMPLICIT_P = 453;</code>
   */
  IMPLICIT_P(453),
  /**
   * <code>IMPORT_P = 454;</code>
   */
  IMPORT_P(454),
  /**
   * <code>IN_P = 455;</code>
   */
  IN_P(455),
  /**
   * <code>INCLUDE = 456;</code>
   */
  INCLUDE(456),
  /**
   * <code>INCLUDING = 457;</code>
   */
  INCLUDING(457),
  /**
   * <code>INCREMENT = 458;</code>
   */
  INCREMENT(458),
  /**
   * <code>INDENT = 459;</code>
   */
  INDENT(459),
  /**
   * <code>INDEX = 460;</code>
   */
  INDEX(460),
  /**
   * <code>INDEXES = 461;</code>
   */
  INDEXES(461),
  /**
   * <code>INHERIT = 462;</code>
   */
  INHERIT(462),
  /**
   * <code>INHERITS = 463;</code>
   */
  INHERITS(463),
  /**
   * <code>INITIALLY = 464;</code>
   */
  INITIALLY(464),
  /**
   * <code>INLINE_P = 465;</code>
   */
  INLINE_P(465),
  /**
   * <code>INNER_P = 466;</code>
   */
  INNER_P(466),
  /**
   * <code>INOUT = 467;</code>
   */
  INOUT(467),
  /**
   * <code>INPUT_P = 468;</code>
   */
  INPUT_P(468),
  /**
   * <code>INSENSITIVE = 469;</code>
   */
  INSENSITIVE(469),
  /**
   * <code>INSERT = 470;</code>
   */
  INSERT(470),
  /**
   * <code>INSTEAD = 471;</code>
   */
  INSTEAD(471),
  /**
   * <code>INT_P = 472;</code>
   */
  INT_P(472),
  /**
   * <code>INTEGER = 473;</code>
   */
  INTEGER(473),
  /**
   * <code>INTERSECT = 474;</code>
   */
  INTERSECT(474),
  /**
   * <code>INTERVAL = 475;</code>
   */
  INTERVAL(475),
  /**
   * <code>INTO = 476;</code>
   */
  INTO(476),
  /**
   * <code>INVOKER = 477;</code>
   */
  INVOKER(477),
  /**
   * <code>IS = 478;</code>
   */
  IS(478),
  /**
   * <code>ISNULL = 479;</code>
   */
  ISNULL(479),
  /**
   * <code>ISOLATION = 480;</code>
   */
  ISOLATION(480),
  /**
   * <code>JOIN = 481;</code>
   */
  JOIN(481),
  /**
   * <code>JSON = 482;</code>
   */
  JSON(482),
  /**
   * <code>JSON_ARRAY = 483;</code>
   */
  JSON_ARRAY(483),
  /**
   * <code>JSON_ARRAYAGG = 484;</code>
   */
  JSON_ARRAYAGG(484),
  /**
   * <code>JSON_OBJECT = 485;</code>
   */
  JSON_OBJECT(485),
  /**
   * <code>JSON_OBJECTAGG = 486;</code>
   */
  JSON_OBJECTAGG(486),
  /**
   * <code>KEY = 487;</code>
   */
  KEY(487),
  /**
   * <code>KEYS = 488;</code>
   */
  KEYS(488),
  /**
   * <code>LABEL = 489;</code>
   */
  LABEL(489),
  /**
   * <code>LANGUAGE = 490;</code>
   */
  LANGUAGE(490),
  /**
   * <code>LARGE_P = 491;</code>
   */
  LARGE_P(491),
  /**
   * <code>LAST_P = 492;</code>
   */
  LAST_P(492),
  /**
   * <code>LATERAL_P = 493;</code>
   */
  LATERAL_P(493),
  /**
   * <code>LEADING = 494;</code>
   */
  LEADING(494),
  /**
   * <code>LEAKPROOF = 495;</code>
   */
  LEAKPROOF(495),
  /**
   * <code>LEAST = 496;</code>
   */
  LEAST(496),
  /**
   * <code>LEFT = 497;</code>
   */
  LEFT(497),
  /**
   * <code>LEVEL = 498;</code>
   */
  LEVEL(498),
  /**
   * <code>LIKE = 499;</code>
   */
  LIKE(499),
  /**
   * <code>LIMIT = 500;</code>
   */
  LIMIT(500),
  /**
   * <code>LISTEN = 501;</code>
   */
  LISTEN(501),
  /**
   * <code>LOAD = 502;</code>
   */
  LOAD(502),
  /**
   * <code>LOCAL = 503;</code>
   */
  LOCAL(503),
  /**
   * <code>LOCALTIME = 504;</code>
   */
  LOCALTIME(504),
  /**
   * <code>LOCALTIMESTAMP = 505;</code>
   */
  LOCALTIMESTAMP(505),
  /**
   * <code>LOCATION = 506;</code>
   */
  LOCATION(506),
  /**
   * <code>LOCK_P = 507;</code>
   */
  LOCK_P(507),
  /**
   * <code>LOCKED = 508;</code>
   */
  LOCKED(508),
  /**
   * <code>LOGGED = 509;</code>
   */
  LOGGED(509),
  /**
   * <code>MAPPING = 510;</code>
   */
  MAPPING(510),
  /**
   * <code>MATCH = 511;</code>
   */
  MATCH(511),
  /**
   * <code>MATCHED = 512;</code>
   */
  MATCHED(512),
  /**
   * <code>MATERIALIZED = 513;</code>
   */
  MATERIALIZED(513),
  /**
   * <code>MAXVALUE = 514;</code>
   */
  MAXVALUE(514),
  /**
   * <code>MERGE = 515;</code>
   */
  MERGE(515),
  /**
   * <code>METHOD = 516;</code>
   */
  METHOD(516),
  /**
   * <code>MINUTE_P = 517;</code>
   */
  MINUTE_P(517),
  /**
   * <code>MINVALUE = 518;</code>
   */
  MINVALUE(518),
  /**
   * <code>MODE = 519;</code>
   */
  MODE(519),
  /**
   * <code>MONTH_P = 520;</code>
   */
  MONTH_P(520),
  /**
   * <code>MOVE = 521;</code>
   */
  MOVE(521),
  /**
   * <code>NAME_P = 522;</code>
   */
  NAME_P(522),
  /**
   * <code>NAMES = 523;</code>
   */
  NAMES(523),
  /**
   * <code>NATIONAL = 524;</code>
   */
  NATIONAL(524),
  /**
   * <code>NATURAL = 525;</code>
   */
  NATURAL(525),
  /**
   * <code>NCHAR = 526;</code>
   */
  NCHAR(526),
  /**
   * <code>NEW = 527;</code>
   */
  NEW(527),
  /**
   * <code>NEXT = 528;</code>
   */
  NEXT(528),
  /**
   * <code>NFC = 529;</code>
   */
  NFC(529),
  /**
   * <code>NFD = 530;</code>
   */
  NFD(530),
  /**
   * <code>NFKC = 531;</code>
   */
  NFKC(531),
  /**
   * <code>NFKD = 532;</code>
   */
  NFKD(532),
  /**
   * <code>NO = 533;</code>
   */
  NO(533),
  /**
   * <code>NONE = 534;</code>
   */
  NONE(534),
  /**
   * <code>NORMALIZE = 535;</code>
   */
  NORMALIZE(535),
  /**
   * <code>NORMALIZED = 536;</code>
   */
  NORMALIZED(536),
  /**
   * <code>NOT = 537;</code>
   */
  NOT(537),
  /**
   * <code>NOTHING = 538;</code>
   */
  NOTHING(538),
  /**
   * <code>NOTIFY = 539;</code>
   */
  NOTIFY(539),
  /**
   * <code>NOTNULL = 540;</code>
   */
  NOTNULL(540),
  /**
   * <code>NOWAIT = 541;</code>
   */
  NOWAIT(541),
  /**
   * <code>NULL_P = 542;</code>
   */
  NULL_P(542),
  /**
   * <code>NULLIF = 543;</code>
   */
  NULLIF(543),
  /**
   * <code>NULLS_P = 544;</code>
   */
  NULLS_P(544),
  /**
   * <code>NUMERIC = 545;</code>
   */
  NUMERIC(545),
  /**
   * <code>OBJECT_P = 546;</code>
   */
  OBJECT_P(546),
  /**
   * <code>OF = 547;</code>
   */
  OF(547),
  /**
   * <code>OFF = 548;</code>
   */
  OFF(548),
  /**
   * <code>OFFSET = 549;</code>
   */
  OFFSET(549),
  /**
   * <code>OIDS = 550;</code>
   */
  OIDS(550),
  /**
   * <code>OLD = 551;</code>
   */
  OLD(551),
  /**
   * <code>ON = 552;</code>
   */
  ON(552),
  /**
   * <code>ONLY = 553;</code>
   */
  ONLY(553),
  /**
   * <code>OPERATOR = 554;</code>
   */
  OPERATOR(554),
  /**
   * <code>OPTION = 555;</code>
   */
  OPTION(555),
  /**
   * <code>OPTIONS = 556;</code>
   */
  OPTIONS(556),
  /**
   * <code>OR = 557;</code>
   */
  OR(557),
  /**
   * <code>ORDER = 558;</code>
   */
  ORDER(558),
  /**
   * <code>ORDINALITY = 559;</code>
   */
  ORDINALITY(559),
  /**
   * <code>OTHERS = 560;</code>
   */
  OTHERS(560),
  /**
   * <code>OUT_P = 561;</code>
   */
  OUT_P(561),
  /**
   * <code>OUTER_P = 562;</code>
   */
  OUTER_P(562),
  /**
   * <code>OVER = 563;</code>
   */
  OVER(563),
  /**
   * <code>OVERLAPS = 564;</code>
   */
  OVERLAPS(564),
  /**
   * <code>OVERLAY = 565;</code>
   */
  OVERLAY(565),
  /**
   * <code>OVERRIDING = 566;</code>
   */
  OVERRIDING(566),
  /**
   * <code>OWNED = 567;</code>
   */
  OWNED(567),
  /**
   * <code>OWNER = 568;</code>
   */
  OWNER(568),
  /**
   * <code>PARALLEL = 569;</code>
   */
  PARALLEL(569),
  /**
   * <code>PARAMETER = 570;</code>
   */
  PARAMETER(570),
  /**
   * <code>PARSER = 571;</code>
   */
  PARSER(571),
  /**
   * <code>PARTIAL = 572;</code>
   */
  PARTIAL(572),
  /**
   * <code>PARTITION = 573;</code>
   */
  PARTITION(573),
  /**
   * <code>PASSING = 574;</code>
   */
  PASSING(574),
  /**
   * <code>PASSWORD = 575;</code>
   */
  PASSWORD(575),
  /**
   * <code>PLACING = 576;</code>
   */
  PLACING(576),
  /**
   * <code>PLANS = 577;</code>
   */
  PLANS(577),
  /**
   * <code>POLICY = 578;</code>
   */
  POLICY(578),
  /**
   * <code>POSITION = 579;</code>
   */
  POSITION(579),
  /**
   * <code>PRECEDING = 580;</code>
   */
  PRECEDING(580),
  /**
   * <code>PRECISION = 581;</code>
   */
  PRECISION(581),
  /**
   * <code>PRESERVE = 582;</code>
   */
  PRESERVE(582),
  /**
   * <code>PREPARE = 583;</code>
   */
  PREPARE(583),
  /**
   * <code>PREPARED = 584;</code>
   */
  PREPARED(584),
  /**
   * <code>PRIMARY = 585;</code>
   */
  PRIMARY(585),
  /**
   * <code>PRIOR = 586;</code>
   */
  PRIOR(586),
  /**
   * <code>PRIVILEGES = 587;</code>
   */
  PRIVILEGES(587),
  /**
   * <code>PROCEDURAL = 588;</code>
   */
  PROCEDURAL(588),
  /**
   * <code>PROCEDURE = 589;</code>
   */
  PROCEDURE(589),
  /**
   * <code>PROCEDURES = 590;</code>
   */
  PROCEDURES(590),
  /**
   * <code>PROGRAM = 591;</code>
   */
  PROGRAM(591),
  /**
   * <code>PUBLICATION = 592;</code>
   */
  PUBLICATION(592),
  /**
   * <code>QUOTE = 593;</code>
   */
  QUOTE(593),
  /**
   * <code>RANGE = 594;</code>
   */
  RANGE(594),
  /**
   * <code>READ = 595;</code>
   */
  READ(595),
  /**
   * <code>REAL = 596;</code>
   */
  REAL(596),
  /**
   * <code>REASSIGN = 597;</code>
   */
  REASSIGN(597),
  /**
   * <code>RECHECK = 598;</code>
   */
  RECHECK(598),
  /**
   * <code>RECURSIVE = 599;</code>
   */
  RECURSIVE(599),
  /**
   * <code>REF_P = 600;</code>
   */
  REF_P(600),
  /**
   * <code>REFERENCES = 601;</code>
   */
  REFERENCES(601),
  /**
   * <code>REFERENCING = 602;</code>
   */
  REFERENCING(602),
  /**
   * <code>REFRESH = 603;</code>
   */
  REFRESH(603),
  /**
   * <code>REINDEX = 604;</code>
   */
  REINDEX(604),
  /**
   * <code>RELATIVE_P = 605;</code>
   */
  RELATIVE_P(605),
  /**
   * <code>RELEASE = 606;</code>
   */
  RELEASE(606),
  /**
   * <code>RENAME = 607;</code>
   */
  RENAME(607),
  /**
   * <code>REPEATABLE = 608;</code>
   */
  REPEATABLE(608),
  /**
   * <code>REPLACE = 609;</code>
   */
  REPLACE(609),
  /**
   * <code>REPLICA = 610;</code>
   */
  REPLICA(610),
  /**
   * <code>RESET = 611;</code>
   */
  RESET(611),
  /**
   * <code>RESTART = 612;</code>
   */
  RESTART(612),
  /**
   * <code>RESTRICT = 613;</code>
   */
  RESTRICT(613),
  /**
   * <code>RETURN = 614;</code>
   */
  RETURN(614),
  /**
   * <code>RETURNING = 615;</code>
   */
  RETURNING(615),
  /**
   * <code>RETURNS = 616;</code>
   */
  RETURNS(616),
  /**
   * <code>REVOKE = 617;</code>
   */
  REVOKE(617),
  /**
   * <code>RIGHT = 618;</code>
   */
  RIGHT(618),
  /**
   * <code>ROLE = 619;</code>
   */
  ROLE(619),
  /**
   * <code>ROLLBACK = 620;</code>
   */
  ROLLBACK(620),
  /**
   * <code>ROLLUP = 621;</code>
   */
  ROLLUP(621),
  /**
   * <code>ROUTINE = 622;</code>
   */
  ROUTINE(622),
  /**
   * <code>ROUTINES = 623;</code>
   */
  ROUTINES(623),
  /**
   * <code>ROW = 624;</code>
   */
  ROW(624),
  /**
   * <code>ROWS = 625;</code>
   */
  ROWS(625),
  /**
   * <code>RULE = 626;</code>
   */
  RULE(626),
  /**
   * <code>SAVEPOINT = 627;</code>
   */
  SAVEPOINT(627),
  /**
   * <code>SCALAR = 628;</code>
   */
  SCALAR(628),
  /**
   * <code>SCHEMA = 629;</code>
   */
  SCHEMA(629),
  /**
   * <code>SCHEMAS = 630;</code>
   */
  SCHEMAS(630),
  /**
   * <code>SCROLL = 631;</code>
   */
  SCROLL(631),
  /**
   * <code>SEARCH = 632;</code>
   */
  SEARCH(632),
  /**
   * <code>SECOND_P = 633;</code>
   */
  SECOND_P(633),
  /**
   * <code>SECURITY = 634;</code>
   */
  SECURITY(634),
  /**
   * <code>SELECT = 635;</code>
   */
  SELECT(635),
  /**
   * <code>SEQUENCE = 636;</code>
   */
  SEQUENCE(636),
  /**
   * <code>SEQUENCES = 637;</code>
   */
  SEQUENCES(637),
  /**
   * <code>SERIALIZABLE = 638;</code>
   */
  SERIALIZABLE(638),
  /**
   * <code>SERVER = 639;</code>
   */
  SERVER(639),
  /**
   * <code>SESSION = 640;</code>
   */
  SESSION(640),
  /**
   * <code>SESSION_USER = 641;</code>
   */
  SESSION_USER(641),
  /**
   * <code>SET = 642;</code>
   */
  SET(642),
  /**
   * <code>SETS = 643;</code>
   */
  SETS(643),
  /**
   * <code>SETOF = 644;</code>
   */
  SETOF(644),
  /**
   * <code>SHARE = 645;</code>
   */
  SHARE(645),
  /**
   * <code>SHOW = 646;</code>
   */
  SHOW(646),
  /**
   * <code>SIMILAR = 647;</code>
   */
  SIMILAR(647),
  /**
   * <code>SIMPLE = 648;</code>
   */
  SIMPLE(648),
  /**
   * <code>SKIP = 649;</code>
   */
  SKIP(649),
  /**
   * <code>SMALLINT = 650;</code>
   */
  SMALLINT(650),
  /**
   * <code>SNAPSHOT = 651;</code>
   */
  SNAPSHOT(651),
  /**
   * <code>SOME = 652;</code>
   */
  SOME(652),
  /**
   * <code>SQL_P = 653;</code>
   */
  SQL_P(653),
  /**
   * <code>STABLE = 654;</code>
   */
  STABLE(654),
  /**
   * <code>STANDALONE_P = 655;</code>
   */
  STANDALONE_P(655),
  /**
   * <code>START = 656;</code>
   */
  START(656),
  /**
   * <code>STATEMENT = 657;</code>
   */
  STATEMENT(657),
  /**
   * <code>STATISTICS = 658;</code>
   */
  STATISTICS(658),
  /**
   * <code>STDIN = 659;</code>
   */
  STDIN(659),
  /**
   * <code>STDOUT = 660;</code>
   */
  STDOUT(660),
  /**
   * <code>STORAGE = 661;</code>
   */
  STORAGE(661),
  /**
   * <code>STORED = 662;</code>
   */
  STORED(662),
  /**
   * <code>STRICT_P = 663;</code>
   */
  STRICT_P(663),
  /**
   * <code>STRIP_P = 664;</code>
   */
  STRIP_P(664),
  /**
   * <code>SUBSCRIPTION = 665;</code>
   */
  SUBSCRIPTION(665),
  /**
   * <code>SUBSTRING = 666;</code>
   */
  SUBSTRING(666),
  /**
   * <code>SUPPORT = 667;</code>
   */
  SUPPORT(667),
  /**
   * <code>SYMMETRIC = 668;</code>
   */
  SYMMETRIC(668),
  /**
   * <code>SYSID = 669;</code>
   */
  SYSID(669),
  /**
   * <code>SYSTEM_P = 670;</code>
   */
  SYSTEM_P(670),
  /**
   * <code>SYSTEM_USER = 671;</code>
   */
  SYSTEM_USER(671),
  /**
   * <code>TABLE = 672;</code>
   */
  TABLE(672),
  /**
   * <code>TABLES = 673;</code>
   */
  TABLES(673),
  /**
   * <code>TABLESAMPLE = 674;</code>
   */
  TABLESAMPLE(674),
  /**
   * <code>TABLESPACE = 675;</code>
   */
  TABLESPACE(675),
  /**
   * <code>TEMP = 676;</code>
   */
  TEMP(676),
  /**
   * <code>TEMPLATE = 677;</code>
   */
  TEMPLATE(677),
  /**
   * <code>TEMPORARY = 678;</code>
   */
  TEMPORARY(678),
  /**
   * <code>TEXT_P = 679;</code>
   */
  TEXT_P(679),
  /**
   * <code>THEN = 680;</code>
   */
  THEN(680),
  /**
   * <code>TIES = 681;</code>
   */
  TIES(681),
  /**
   * <code>TIME = 682;</code>
   */
  TIME(682),
  /**
   * <code>TIMESTAMP = 683;</code>
   */
  TIMESTAMP(683),
  /**
   * <code>TO = 684;</code>
   */
  TO(684),
  /**
   * <code>TRAILING = 685;</code>
   */
  TRAILING(685),
  /**
   * <code>TRANSACTION = 686;</code>
   */
  TRANSACTION(686),
  /**
   * <code>TRANSFORM = 687;</code>
   */
  TRANSFORM(687),
  /**
   * <code>TREAT = 688;</code>
   */
  TREAT(688),
  /**
   * <code>TRIGGER = 689;</code>
   */
  TRIGGER(689),
  /**
   * <code>TRIM = 690;</code>
   */
  TRIM(690),
  /**
   * <code>TRUE_P = 691;</code>
   */
  TRUE_P(691),
  /**
   * <code>TRUNCATE = 692;</code>
   */
  TRUNCATE(692),
  /**
   * <code>TRUSTED = 693;</code>
   */
  TRUSTED(693),
  /**
   * <code>TYPE_P = 694;</code>
   */
  TYPE_P(694),
  /**
   * <code>TYPES_P = 695;</code>
   */
  TYPES_P(695),
  /**
   * <code>UESCAPE = 696;</code>
   */
  UESCAPE(696),
  /**
   * <code>UNBOUNDED = 697;</code>
   */
  UNBOUNDED(697),
  /**
   * <code>UNCOMMITTED = 698;</code>
   */
  UNCOMMITTED(698),
  /**
   * <code>UNENCRYPTED = 699;</code>
   */
  UNENCRYPTED(699),
  /**
   * <code>UNION = 700;</code>
   */
  UNION(700),
  /**
   * <code>UNIQUE = 701;</code>
   */
  UNIQUE(701),
  /**
   * <code>UNKNOWN = 702;</code>
   */
  UNKNOWN(702),
  /**
   * <code>UNLISTEN = 703;</code>
   */
  UNLISTEN(703),
  /**
   * <code>UNLOGGED = 704;</code>
   */
  UNLOGGED(704),
  /**
   * <code>UNTIL = 705;</code>
   */
  UNTIL(705),
  /**
   * <code>UPDATE = 706;</code>
   */
  UPDATE(706),
  /**
   * <code>USER = 707;</code>
   */
  USER(707),
  /**
   * <code>USING = 708;</code>
   */
  USING(708),
  /**
   * <code>VACUUM = 709;</code>
   */
  VACUUM(709),
  /**
   * <code>VALID = 710;</code>
   */
  VALID(710),
  /**
   * <code>VALIDATE = 711;</code>
   */
  VALIDATE(711),
  /**
   * <code>VALIDATOR = 712;</code>
   */
  VALIDATOR(712),
  /**
   * <code>VALUE_P = 713;</code>
   */
  VALUE_P(713),
  /**
   * <code>VALUES = 714;</code>
   */
  VALUES(714),
  /**
   * <code>VARCHAR = 715;</code>
   */
  VARCHAR(715),
  /**
   * <code>VARIADIC = 716;</code>
   */
  VARIADIC(716),
  /**
   * <code>VARYING = 717;</code>
   */
  VARYING(717),
  /**
   * <code>VERBOSE = 718;</code>
   */
  VERBOSE(718),
  /**
   * <code>VERSION_P = 719;</code>
   */
  VERSION_P(719),
  /**
   * <code>VIEW = 720;</code>
   */
  VIEW(720),
  /**
   * <code>VIEWS = 721;</code>
   */
  VIEWS(721),
  /**
   * <code>VOLATILE = 722;</code>
   */
  VOLATILE(722),
  /**
   * <code>WHEN = 723;</code>
   */
  WHEN(723),
  /**
   * <code>WHERE = 724;</code>
   */
  WHERE(724),
  /**
   * <code>WHITESPACE_P = 725;</code>
   */
  WHITESPACE_P(725),
  /**
   * <code>WINDOW = 726;</code>
   */
  WINDOW(726),
  /**
   * <code>WITH = 727;</code>
   */
  WITH(727),
  /**
   * <code>WITHIN = 728;</code>
   */
  WITHIN(728),
  /**
   * <code>WITHOUT = 729;</code>
   */
  WITHOUT(729),
  /**
   * <code>WORK = 730;</code>
   */
  WORK(730),
  /**
   * <code>WRAPPER = 731;</code>
   */
  WRAPPER(731),
  /**
   * <code>WRITE = 732;</code>
   */
  WRITE(732),
  /**
   * <code>XML_P = 733;</code>
   */
  XML_P(733),
  /**
   * <code>XMLATTRIBUTES = 734;</code>
   */
  XMLATTRIBUTES(734),
  /**
   * <code>XMLCONCAT = 735;</code>
   */
  XMLCONCAT(735),
  /**
   * <code>XMLELEMENT = 736;</code>
   */
  XMLELEMENT(736),
  /**
   * <code>XMLEXISTS = 737;</code>
   */
  XMLEXISTS(737),
  /**
   * <code>XMLFOREST = 738;</code>
   */
  XMLFOREST(738),
  /**
   * <code>XMLNAMESPACES = 739;</code>
   */
  XMLNAMESPACES(739),
  /**
   * <code>XMLPARSE = 740;</code>
   */
  XMLPARSE(740),
  /**
   * <code>XMLPI = 741;</code>
   */
  XMLPI(741),
  /**
   * <code>XMLROOT = 742;</code>
   */
  XMLROOT(742),
  /**
   * <code>XMLSERIALIZE = 743;</code>
   */
  XMLSERIALIZE(743),
  /**
   * <code>XMLTABLE = 744;</code>
   */
  XMLTABLE(744),
  /**
   * <code>YEAR_P = 745;</code>
   */
  YEAR_P(745),
  /**
   * <code>YES_P = 746;</code>
   */
  YES_P(746),
  /**
   * <code>ZONE = 747;</code>
   */
  ZONE(747),
  /**
   * <code>FORMAT_LA = 748;</code>
   */
  FORMAT_LA(748),
  /**
   * <code>NOT_LA = 749;</code>
   */
  NOT_LA(749),
  /**
   * <code>NULLS_LA = 750;</code>
   */
  NULLS_LA(750),
  /**
   * <code>WITH_LA = 751;</code>
   */
  WITH_LA(751),
  /**
   * <code>WITHOUT_LA = 752;</code>
   */
  WITHOUT_LA(752),
  /**
   * <code>MODE_TYPE_NAME = 753;</code>
   */
  MODE_TYPE_NAME(753),
  /**
   * <code>MODE_PLPGSQL_EXPR = 754;</code>
   */
  MODE_PLPGSQL_EXPR(754),
  /**
   * <code>MODE_PLPGSQL_ASSIGN1 = 755;</code>
   */
  MODE_PLPGSQL_ASSIGN1(755),
  /**
   * <code>MODE_PLPGSQL_ASSIGN2 = 756;</code>
   */
  MODE_PLPGSQL_ASSIGN2(756),
  /**
   * <code>MODE_PLPGSQL_ASSIGN3 = 757;</code>
   */
  MODE_PLPGSQL_ASSIGN3(757),
  /**
   * <code>UMINUS = 758;</code>
   */
  UMINUS(758),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>NUL = 0;</code>
   */
  public static final int NUL_VALUE = 0;
  /**
   * <pre>
   * Single-character tokens that are returned 1:1 (identical with "self" list in scan.l)
   * Either supporting syntax, or single-character operators (some can be both)
   * Also see https://www.postgresql.org/docs/12/sql-syntax-lexical.html#SQL-SYNTAX-SPECIAL-CHARS
   * </pre>
   *
   * <code>ASCII_36 = 36;</code>
   */
  public static final int ASCII_36_VALUE = 36;
  /**
   * <pre>
   * "%"
   * </pre>
   *
   * <code>ASCII_37 = 37;</code>
   */
  public static final int ASCII_37_VALUE = 37;
  /**
   * <pre>
   * "("
   * </pre>
   *
   * <code>ASCII_40 = 40;</code>
   */
  public static final int ASCII_40_VALUE = 40;
  /**
   * <pre>
   * ")"
   * </pre>
   *
   * <code>ASCII_41 = 41;</code>
   */
  public static final int ASCII_41_VALUE = 41;
  /**
   * <pre>
   * "*"
   * </pre>
   *
   * <code>ASCII_42 = 42;</code>
   */
  public static final int ASCII_42_VALUE = 42;
  /**
   * <pre>
   * "+"
   * </pre>
   *
   * <code>ASCII_43 = 43;</code>
   */
  public static final int ASCII_43_VALUE = 43;
  /**
   * <pre>
   * ","
   * </pre>
   *
   * <code>ASCII_44 = 44;</code>
   */
  public static final int ASCII_44_VALUE = 44;
  /**
   * <pre>
   * "-"
   * </pre>
   *
   * <code>ASCII_45 = 45;</code>
   */
  public static final int ASCII_45_VALUE = 45;
  /**
   * <pre>
   * "."
   * </pre>
   *
   * <code>ASCII_46 = 46;</code>
   */
  public static final int ASCII_46_VALUE = 46;
  /**
   * <pre>
   * "/"
   * </pre>
   *
   * <code>ASCII_47 = 47;</code>
   */
  public static final int ASCII_47_VALUE = 47;
  /**
   * <pre>
   * ":"
   * </pre>
   *
   * <code>ASCII_58 = 58;</code>
   */
  public static final int ASCII_58_VALUE = 58;
  /**
   * <pre>
   * ";"
   * </pre>
   *
   * <code>ASCII_59 = 59;</code>
   */
  public static final int ASCII_59_VALUE = 59;
  /**
   * <pre>
   * "&lt;"
   * </pre>
   *
   * <code>ASCII_60 = 60;</code>
   */
  public static final int ASCII_60_VALUE = 60;
  /**
   * <pre>
   * "="
   * </pre>
   *
   * <code>ASCII_61 = 61;</code>
   */
  public static final int ASCII_61_VALUE = 61;
  /**
   * <pre>
   * "&gt;"
   * </pre>
   *
   * <code>ASCII_62 = 62;</code>
   */
  public static final int ASCII_62_VALUE = 62;
  /**
   * <pre>
   * "?"
   * </pre>
   *
   * <code>ASCII_63 = 63;</code>
   */
  public static final int ASCII_63_VALUE = 63;
  /**
   * <pre>
   * "["
   * </pre>
   *
   * <code>ASCII_91 = 91;</code>
   */
  public static final int ASCII_91_VALUE = 91;
  /**
   * <pre>
   * "&#92;"
   * </pre>
   *
   * <code>ASCII_92 = 92;</code>
   */
  public static final int ASCII_92_VALUE = 92;
  /**
   * <pre>
   * "]"
   * </pre>
   *
   * <code>ASCII_93 = 93;</code>
   */
  public static final int ASCII_93_VALUE = 93;
  /**
   * <pre>
   * "^"
   * </pre>
   *
   * <code>ASCII_94 = 94;</code>
   */
  public static final int ASCII_94_VALUE = 94;
  /**
   * <pre>
   * Named tokens in scan.l
   * </pre>
   *
   * <code>IDENT = 258;</code>
   */
  public static final int IDENT_VALUE = 258;
  /**
   * <code>UIDENT = 259;</code>
   */
  public static final int UIDENT_VALUE = 259;
  /**
   * <code>FCONST = 260;</code>
   */
  public static final int FCONST_VALUE = 260;
  /**
   * <code>SCONST = 261;</code>
   */
  public static final int SCONST_VALUE = 261;
  /**
   * <code>USCONST = 262;</code>
   */
  public static final int USCONST_VALUE = 262;
  /**
   * <code>BCONST = 263;</code>
   */
  public static final int BCONST_VALUE = 263;
  /**
   * <code>XCONST = 264;</code>
   */
  public static final int XCONST_VALUE = 264;
  /**
   * <code>Op = 265;</code>
   */
  public static final int Op_VALUE = 265;
  /**
   * <code>ICONST = 266;</code>
   */
  public static final int ICONST_VALUE = 266;
  /**
   * <code>PARAM = 267;</code>
   */
  public static final int PARAM_VALUE = 267;
  /**
   * <code>TYPECAST = 268;</code>
   */
  public static final int TYPECAST_VALUE = 268;
  /**
   * <code>DOT_DOT = 269;</code>
   */
  public static final int DOT_DOT_VALUE = 269;
  /**
   * <code>COLON_EQUALS = 270;</code>
   */
  public static final int COLON_EQUALS_VALUE = 270;
  /**
   * <code>EQUALS_GREATER = 271;</code>
   */
  public static final int EQUALS_GREATER_VALUE = 271;
  /**
   * <code>LESS_EQUALS = 272;</code>
   */
  public static final int LESS_EQUALS_VALUE = 272;
  /**
   * <code>GREATER_EQUALS = 273;</code>
   */
  public static final int GREATER_EQUALS_VALUE = 273;
  /**
   * <code>NOT_EQUALS = 274;</code>
   */
  public static final int NOT_EQUALS_VALUE = 274;
  /**
   * <code>SQL_COMMENT = 275;</code>
   */
  public static final int SQL_COMMENT_VALUE = 275;
  /**
   * <code>C_COMMENT = 276;</code>
   */
  public static final int C_COMMENT_VALUE = 276;
  /**
   * <code>ABORT_P = 277;</code>
   */
  public static final int ABORT_P_VALUE = 277;
  /**
   * <code>ABSENT = 278;</code>
   */
  public static final int ABSENT_VALUE = 278;
  /**
   * <code>ABSOLUTE_P = 279;</code>
   */
  public static final int ABSOLUTE_P_VALUE = 279;
  /**
   * <code>ACCESS = 280;</code>
   */
  public static final int ACCESS_VALUE = 280;
  /**
   * <code>ACTION = 281;</code>
   */
  public static final int ACTION_VALUE = 281;
  /**
   * <code>ADD_P = 282;</code>
   */
  public static final int ADD_P_VALUE = 282;
  /**
   * <code>ADMIN = 283;</code>
   */
  public static final int ADMIN_VALUE = 283;
  /**
   * <code>AFTER = 284;</code>
   */
  public static final int AFTER_VALUE = 284;
  /**
   * <code>AGGREGATE = 285;</code>
   */
  public static final int AGGREGATE_VALUE = 285;
  /**
   * <code>ALL = 286;</code>
   */
  public static final int ALL_VALUE = 286;
  /**
   * <code>ALSO = 287;</code>
   */
  public static final int ALSO_VALUE = 287;
  /**
   * <code>ALTER = 288;</code>
   */
  public static final int ALTER_VALUE = 288;
  /**
   * <code>ALWAYS = 289;</code>
   */
  public static final int ALWAYS_VALUE = 289;
  /**
   * <code>ANALYSE = 290;</code>
   */
  public static final int ANALYSE_VALUE = 290;
  /**
   * <code>ANALYZE = 291;</code>
   */
  public static final int ANALYZE_VALUE = 291;
  /**
   * <code>AND = 292;</code>
   */
  public static final int AND_VALUE = 292;
  /**
   * <code>ANY = 293;</code>
   */
  public static final int ANY_VALUE = 293;
  /**
   * <code>ARRAY = 294;</code>
   */
  public static final int ARRAY_VALUE = 294;
  /**
   * <code>AS = 295;</code>
   */
  public static final int AS_VALUE = 295;
  /**
   * <code>ASC = 296;</code>
   */
  public static final int ASC_VALUE = 296;
  /**
   * <code>ASENSITIVE = 297;</code>
   */
  public static final int ASENSITIVE_VALUE = 297;
  /**
   * <code>ASSERTION = 298;</code>
   */
  public static final int ASSERTION_VALUE = 298;
  /**
   * <code>ASSIGNMENT = 299;</code>
   */
  public static final int ASSIGNMENT_VALUE = 299;
  /**
   * <code>ASYMMETRIC = 300;</code>
   */
  public static final int ASYMMETRIC_VALUE = 300;
  /**
   * <code>ATOMIC = 301;</code>
   */
  public static final int ATOMIC_VALUE = 301;
  /**
   * <code>AT = 302;</code>
   */
  public static final int AT_VALUE = 302;
  /**
   * <code>ATTACH = 303;</code>
   */
  public static final int ATTACH_VALUE = 303;
  /**
   * <code>ATTRIBUTE = 304;</code>
   */
  public static final int ATTRIBUTE_VALUE = 304;
  /**
   * <code>AUTHORIZATION = 305;</code>
   */
  public static final int AUTHORIZATION_VALUE = 305;
  /**
   * <code>BACKWARD = 306;</code>
   */
  public static final int BACKWARD_VALUE = 306;
  /**
   * <code>BEFORE = 307;</code>
   */
  public static final int BEFORE_VALUE = 307;
  /**
   * <code>BEGIN_P = 308;</code>
   */
  public static final int BEGIN_P_VALUE = 308;
  /**
   * <code>BETWEEN = 309;</code>
   */
  public static final int BETWEEN_VALUE = 309;
  /**
   * <code>BIGINT = 310;</code>
   */
  public static final int BIGINT_VALUE = 310;
  /**
   * <code>BINARY = 311;</code>
   */
  public static final int BINARY_VALUE = 311;
  /**
   * <code>BIT = 312;</code>
   */
  public static final int BIT_VALUE = 312;
  /**
   * <code>BOOLEAN_P = 313;</code>
   */
  public static final int BOOLEAN_P_VALUE = 313;
  /**
   * <code>BOTH = 314;</code>
   */
  public static final int BOTH_VALUE = 314;
  /**
   * <code>BREADTH = 315;</code>
   */
  public static final int BREADTH_VALUE = 315;
  /**
   * <code>BY = 316;</code>
   */
  public static final int BY_VALUE = 316;
  /**
   * <code>CACHE = 317;</code>
   */
  public static final int CACHE_VALUE = 317;
  /**
   * <code>CALL = 318;</code>
   */
  public static final int CALL_VALUE = 318;
  /**
   * <code>CALLED = 319;</code>
   */
  public static final int CALLED_VALUE = 319;
  /**
   * <code>CASCADE = 320;</code>
   */
  public static final int CASCADE_VALUE = 320;
  /**
   * <code>CASCADED = 321;</code>
   */
  public static final int CASCADED_VALUE = 321;
  /**
   * <code>CASE = 322;</code>
   */
  public static final int CASE_VALUE = 322;
  /**
   * <code>CAST = 323;</code>
   */
  public static final int CAST_VALUE = 323;
  /**
   * <code>CATALOG_P = 324;</code>
   */
  public static final int CATALOG_P_VALUE = 324;
  /**
   * <code>CHAIN = 325;</code>
   */
  public static final int CHAIN_VALUE = 325;
  /**
   * <code>CHAR_P = 326;</code>
   */
  public static final int CHAR_P_VALUE = 326;
  /**
   * <code>CHARACTER = 327;</code>
   */
  public static final int CHARACTER_VALUE = 327;
  /**
   * <code>CHARACTERISTICS = 328;</code>
   */
  public static final int CHARACTERISTICS_VALUE = 328;
  /**
   * <code>CHECK = 329;</code>
   */
  public static final int CHECK_VALUE = 329;
  /**
   * <code>CHECKPOINT = 330;</code>
   */
  public static final int CHECKPOINT_VALUE = 330;
  /**
   * <code>CLASS = 331;</code>
   */
  public static final int CLASS_VALUE = 331;
  /**
   * <code>CLOSE = 332;</code>
   */
  public static final int CLOSE_VALUE = 332;
  /**
   * <code>CLUSTER = 333;</code>
   */
  public static final int CLUSTER_VALUE = 333;
  /**
   * <code>COALESCE = 334;</code>
   */
  public static final int COALESCE_VALUE = 334;
  /**
   * <code>COLLATE = 335;</code>
   */
  public static final int COLLATE_VALUE = 335;
  /**
   * <code>COLLATION = 336;</code>
   */
  public static final int COLLATION_VALUE = 336;
  /**
   * <code>COLUMN = 337;</code>
   */
  public static final int COLUMN_VALUE = 337;
  /**
   * <code>COLUMNS = 338;</code>
   */
  public static final int COLUMNS_VALUE = 338;
  /**
   * <code>COMMENT = 339;</code>
   */
  public static final int COMMENT_VALUE = 339;
  /**
   * <code>COMMENTS = 340;</code>
   */
  public static final int COMMENTS_VALUE = 340;
  /**
   * <code>COMMIT = 341;</code>
   */
  public static final int COMMIT_VALUE = 341;
  /**
   * <code>COMMITTED = 342;</code>
   */
  public static final int COMMITTED_VALUE = 342;
  /**
   * <code>COMPRESSION = 343;</code>
   */
  public static final int COMPRESSION_VALUE = 343;
  /**
   * <code>CONCURRENTLY = 344;</code>
   */
  public static final int CONCURRENTLY_VALUE = 344;
  /**
   * <code>CONFIGURATION = 345;</code>
   */
  public static final int CONFIGURATION_VALUE = 345;
  /**
   * <code>CONFLICT = 346;</code>
   */
  public static final int CONFLICT_VALUE = 346;
  /**
   * <code>CONNECTION = 347;</code>
   */
  public static final int CONNECTION_VALUE = 347;
  /**
   * <code>CONSTRAINT = 348;</code>
   */
  public static final int CONSTRAINT_VALUE = 348;
  /**
   * <code>CONSTRAINTS = 349;</code>
   */
  public static final int CONSTRAINTS_VALUE = 349;
  /**
   * <code>CONTENT_P = 350;</code>
   */
  public static final int CONTENT_P_VALUE = 350;
  /**
   * <code>CONTINUE_P = 351;</code>
   */
  public static final int CONTINUE_P_VALUE = 351;
  /**
   * <code>CONVERSION_P = 352;</code>
   */
  public static final int CONVERSION_P_VALUE = 352;
  /**
   * <code>COPY = 353;</code>
   */
  public static final int COPY_VALUE = 353;
  /**
   * <code>COST = 354;</code>
   */
  public static final int COST_VALUE = 354;
  /**
   * <code>CREATE = 355;</code>
   */
  public static final int CREATE_VALUE = 355;
  /**
   * <code>CROSS = 356;</code>
   */
  public static final int CROSS_VALUE = 356;
  /**
   * <code>CSV = 357;</code>
   */
  public static final int CSV_VALUE = 357;
  /**
   * <code>CUBE = 358;</code>
   */
  public static final int CUBE_VALUE = 358;
  /**
   * <code>CURRENT_P = 359;</code>
   */
  public static final int CURRENT_P_VALUE = 359;
  /**
   * <code>CURRENT_CATALOG = 360;</code>
   */
  public static final int CURRENT_CATALOG_VALUE = 360;
  /**
   * <code>CURRENT_DATE = 361;</code>
   */
  public static final int CURRENT_DATE_VALUE = 361;
  /**
   * <code>CURRENT_ROLE = 362;</code>
   */
  public static final int CURRENT_ROLE_VALUE = 362;
  /**
   * <code>CURRENT_SCHEMA = 363;</code>
   */
  public static final int CURRENT_SCHEMA_VALUE = 363;
  /**
   * <code>CURRENT_TIME = 364;</code>
   */
  public static final int CURRENT_TIME_VALUE = 364;
  /**
   * <code>CURRENT_TIMESTAMP = 365;</code>
   */
  public static final int CURRENT_TIMESTAMP_VALUE = 365;
  /**
   * <code>CURRENT_USER = 366;</code>
   */
  public static final int CURRENT_USER_VALUE = 366;
  /**
   * <code>CURSOR = 367;</code>
   */
  public static final int CURSOR_VALUE = 367;
  /**
   * <code>CYCLE = 368;</code>
   */
  public static final int CYCLE_VALUE = 368;
  /**
   * <code>DATA_P = 369;</code>
   */
  public static final int DATA_P_VALUE = 369;
  /**
   * <code>DATABASE = 370;</code>
   */
  public static final int DATABASE_VALUE = 370;
  /**
   * <code>DAY_P = 371;</code>
   */
  public static final int DAY_P_VALUE = 371;
  /**
   * <code>DEALLOCATE = 372;</code>
   */
  public static final int DEALLOCATE_VALUE = 372;
  /**
   * <code>DEC = 373;</code>
   */
  public static final int DEC_VALUE = 373;
  /**
   * <code>DECIMAL_P = 374;</code>
   */
  public static final int DECIMAL_P_VALUE = 374;
  /**
   * <code>DECLARE = 375;</code>
   */
  public static final int DECLARE_VALUE = 375;
  /**
   * <code>DEFAULT = 376;</code>
   */
  public static final int DEFAULT_VALUE = 376;
  /**
   * <code>DEFAULTS = 377;</code>
   */
  public static final int DEFAULTS_VALUE = 377;
  /**
   * <code>DEFERRABLE = 378;</code>
   */
  public static final int DEFERRABLE_VALUE = 378;
  /**
   * <code>DEFERRED = 379;</code>
   */
  public static final int DEFERRED_VALUE = 379;
  /**
   * <code>DEFINER = 380;</code>
   */
  public static final int DEFINER_VALUE = 380;
  /**
   * <code>DELETE_P = 381;</code>
   */
  public static final int DELETE_P_VALUE = 381;
  /**
   * <code>DELIMITER = 382;</code>
   */
  public static final int DELIMITER_VALUE = 382;
  /**
   * <code>DELIMITERS = 383;</code>
   */
  public static final int DELIMITERS_VALUE = 383;
  /**
   * <code>DEPENDS = 384;</code>
   */
  public static final int DEPENDS_VALUE = 384;
  /**
   * <code>DEPTH = 385;</code>
   */
  public static final int DEPTH_VALUE = 385;
  /**
   * <code>DESC = 386;</code>
   */
  public static final int DESC_VALUE = 386;
  /**
   * <code>DETACH = 387;</code>
   */
  public static final int DETACH_VALUE = 387;
  /**
   * <code>DICTIONARY = 388;</code>
   */
  public static final int DICTIONARY_VALUE = 388;
  /**
   * <code>DISABLE_P = 389;</code>
   */
  public static final int DISABLE_P_VALUE = 389;
  /**
   * <code>DISCARD = 390;</code>
   */
  public static final int DISCARD_VALUE = 390;
  /**
   * <code>DISTINCT = 391;</code>
   */
  public static final int DISTINCT_VALUE = 391;
  /**
   * <code>DO = 392;</code>
   */
  public static final int DO_VALUE = 392;
  /**
   * <code>DOCUMENT_P = 393;</code>
   */
  public static final int DOCUMENT_P_VALUE = 393;
  /**
   * <code>DOMAIN_P = 394;</code>
   */
  public static final int DOMAIN_P_VALUE = 394;
  /**
   * <code>DOUBLE_P = 395;</code>
   */
  public static final int DOUBLE_P_VALUE = 395;
  /**
   * <code>DROP = 396;</code>
   */
  public static final int DROP_VALUE = 396;
  /**
   * <code>EACH = 397;</code>
   */
  public static final int EACH_VALUE = 397;
  /**
   * <code>ELSE = 398;</code>
   */
  public static final int ELSE_VALUE = 398;
  /**
   * <code>ENABLE_P = 399;</code>
   */
  public static final int ENABLE_P_VALUE = 399;
  /**
   * <code>ENCODING = 400;</code>
   */
  public static final int ENCODING_VALUE = 400;
  /**
   * <code>ENCRYPTED = 401;</code>
   */
  public static final int ENCRYPTED_VALUE = 401;
  /**
   * <code>END_P = 402;</code>
   */
  public static final int END_P_VALUE = 402;
  /**
   * <code>ENUM_P = 403;</code>
   */
  public static final int ENUM_P_VALUE = 403;
  /**
   * <code>ESCAPE = 404;</code>
   */
  public static final int ESCAPE_VALUE = 404;
  /**
   * <code>EVENT = 405;</code>
   */
  public static final int EVENT_VALUE = 405;
  /**
   * <code>EXCEPT = 406;</code>
   */
  public static final int EXCEPT_VALUE = 406;
  /**
   * <code>EXCLUDE = 407;</code>
   */
  public static final int EXCLUDE_VALUE = 407;
  /**
   * <code>EXCLUDING = 408;</code>
   */
  public static final int EXCLUDING_VALUE = 408;
  /**
   * <code>EXCLUSIVE = 409;</code>
   */
  public static final int EXCLUSIVE_VALUE = 409;
  /**
   * <code>EXECUTE = 410;</code>
   */
  public static final int EXECUTE_VALUE = 410;
  /**
   * <code>EXISTS = 411;</code>
   */
  public static final int EXISTS_VALUE = 411;
  /**
   * <code>EXPLAIN = 412;</code>
   */
  public static final int EXPLAIN_VALUE = 412;
  /**
   * <code>EXPRESSION = 413;</code>
   */
  public static final int EXPRESSION_VALUE = 413;
  /**
   * <code>EXTENSION = 414;</code>
   */
  public static final int EXTENSION_VALUE = 414;
  /**
   * <code>EXTERNAL = 415;</code>
   */
  public static final int EXTERNAL_VALUE = 415;
  /**
   * <code>EXTRACT = 416;</code>
   */
  public static final int EXTRACT_VALUE = 416;
  /**
   * <code>FALSE_P = 417;</code>
   */
  public static final int FALSE_P_VALUE = 417;
  /**
   * <code>FAMILY = 418;</code>
   */
  public static final int FAMILY_VALUE = 418;
  /**
   * <code>FETCH = 419;</code>
   */
  public static final int FETCH_VALUE = 419;
  /**
   * <code>FILTER = 420;</code>
   */
  public static final int FILTER_VALUE = 420;
  /**
   * <code>FINALIZE = 421;</code>
   */
  public static final int FINALIZE_VALUE = 421;
  /**
   * <code>FIRST_P = 422;</code>
   */
  public static final int FIRST_P_VALUE = 422;
  /**
   * <code>FLOAT_P = 423;</code>
   */
  public static final int FLOAT_P_VALUE = 423;
  /**
   * <code>FOLLOWING = 424;</code>
   */
  public static final int FOLLOWING_VALUE = 424;
  /**
   * <code>FOR = 425;</code>
   */
  public static final int FOR_VALUE = 425;
  /**
   * <code>FORCE = 426;</code>
   */
  public static final int FORCE_VALUE = 426;
  /**
   * <code>FOREIGN = 427;</code>
   */
  public static final int FOREIGN_VALUE = 427;
  /**
   * <code>FORMAT = 428;</code>
   */
  public static final int FORMAT_VALUE = 428;
  /**
   * <code>FORWARD = 429;</code>
   */
  public static final int FORWARD_VALUE = 429;
  /**
   * <code>FREEZE = 430;</code>
   */
  public static final int FREEZE_VALUE = 430;
  /**
   * <code>FROM = 431;</code>
   */
  public static final int FROM_VALUE = 431;
  /**
   * <code>FULL = 432;</code>
   */
  public static final int FULL_VALUE = 432;
  /**
   * <code>FUNCTION = 433;</code>
   */
  public static final int FUNCTION_VALUE = 433;
  /**
   * <code>FUNCTIONS = 434;</code>
   */
  public static final int FUNCTIONS_VALUE = 434;
  /**
   * <code>GENERATED = 435;</code>
   */
  public static final int GENERATED_VALUE = 435;
  /**
   * <code>GLOBAL = 436;</code>
   */
  public static final int GLOBAL_VALUE = 436;
  /**
   * <code>GRANT = 437;</code>
   */
  public static final int GRANT_VALUE = 437;
  /**
   * <code>GRANTED = 438;</code>
   */
  public static final int GRANTED_VALUE = 438;
  /**
   * <code>GREATEST = 439;</code>
   */
  public static final int GREATEST_VALUE = 439;
  /**
   * <code>GROUP_P = 440;</code>
   */
  public static final int GROUP_P_VALUE = 440;
  /**
   * <code>GROUPING = 441;</code>
   */
  public static final int GROUPING_VALUE = 441;
  /**
   * <code>GROUPS = 442;</code>
   */
  public static final int GROUPS_VALUE = 442;
  /**
   * <code>HANDLER = 443;</code>
   */
  public static final int HANDLER_VALUE = 443;
  /**
   * <code>HAVING = 444;</code>
   */
  public static final int HAVING_VALUE = 444;
  /**
   * <code>HEADER_P = 445;</code>
   */
  public static final int HEADER_P_VALUE = 445;
  /**
   * <code>HOLD = 446;</code>
   */
  public static final int HOLD_VALUE = 446;
  /**
   * <code>HOUR_P = 447;</code>
   */
  public static final int HOUR_P_VALUE = 447;
  /**
   * <code>IDENTITY_P = 448;</code>
   */
  public static final int IDENTITY_P_VALUE = 448;
  /**
   * <code>IF_P = 449;</code>
   */
  public static final int IF_P_VALUE = 449;
  /**
   * <code>ILIKE = 450;</code>
   */
  public static final int ILIKE_VALUE = 450;
  /**
   * <code>IMMEDIATE = 451;</code>
   */
  public static final int IMMEDIATE_VALUE = 451;
  /**
   * <code>IMMUTABLE = 452;</code>
   */
  public static final int IMMUTABLE_VALUE = 452;
  /**
   * <code>IMPLICIT_P = 453;</code>
   */
  public static final int IMPLICIT_P_VALUE = 453;
  /**
   * <code>IMPORT_P = 454;</code>
   */
  public static final int IMPORT_P_VALUE = 454;
  /**
   * <code>IN_P = 455;</code>
   */
  public static final int IN_P_VALUE = 455;
  /**
   * <code>INCLUDE = 456;</code>
   */
  public static final int INCLUDE_VALUE = 456;
  /**
   * <code>INCLUDING = 457;</code>
   */
  public static final int INCLUDING_VALUE = 457;
  /**
   * <code>INCREMENT = 458;</code>
   */
  public static final int INCREMENT_VALUE = 458;
  /**
   * <code>INDENT = 459;</code>
   */
  public static final int INDENT_VALUE = 459;
  /**
   * <code>INDEX = 460;</code>
   */
  public static final int INDEX_VALUE = 460;
  /**
   * <code>INDEXES = 461;</code>
   */
  public static final int INDEXES_VALUE = 461;
  /**
   * <code>INHERIT = 462;</code>
   */
  public static final int INHERIT_VALUE = 462;
  /**
   * <code>INHERITS = 463;</code>
   */
  public static final int INHERITS_VALUE = 463;
  /**
   * <code>INITIALLY = 464;</code>
   */
  public static final int INITIALLY_VALUE = 464;
  /**
   * <code>INLINE_P = 465;</code>
   */
  public static final int INLINE_P_VALUE = 465;
  /**
   * <code>INNER_P = 466;</code>
   */
  public static final int INNER_P_VALUE = 466;
  /**
   * <code>INOUT = 467;</code>
   */
  public static final int INOUT_VALUE = 467;
  /**
   * <code>INPUT_P = 468;</code>
   */
  public static final int INPUT_P_VALUE = 468;
  /**
   * <code>INSENSITIVE = 469;</code>
   */
  public static final int INSENSITIVE_VALUE = 469;
  /**
   * <code>INSERT = 470;</code>
   */
  public static final int INSERT_VALUE = 470;
  /**
   * <code>INSTEAD = 471;</code>
   */
  public static final int INSTEAD_VALUE = 471;
  /**
   * <code>INT_P = 472;</code>
   */
  public static final int INT_P_VALUE = 472;
  /**
   * <code>INTEGER = 473;</code>
   */
  public static final int INTEGER_VALUE = 473;
  /**
   * <code>INTERSECT = 474;</code>
   */
  public static final int INTERSECT_VALUE = 474;
  /**
   * <code>INTERVAL = 475;</code>
   */
  public static final int INTERVAL_VALUE = 475;
  /**
   * <code>INTO = 476;</code>
   */
  public static final int INTO_VALUE = 476;
  /**
   * <code>INVOKER = 477;</code>
   */
  public static final int INVOKER_VALUE = 477;
  /**
   * <code>IS = 478;</code>
   */
  public static final int IS_VALUE = 478;
  /**
   * <code>ISNULL = 479;</code>
   */
  public static final int ISNULL_VALUE = 479;
  /**
   * <code>ISOLATION = 480;</code>
   */
  public static final int ISOLATION_VALUE = 480;
  /**
   * <code>JOIN = 481;</code>
   */
  public static final int JOIN_VALUE = 481;
  /**
   * <code>JSON = 482;</code>
   */
  public static final int JSON_VALUE = 482;
  /**
   * <code>JSON_ARRAY = 483;</code>
   */
  public static final int JSON_ARRAY_VALUE = 483;
  /**
   * <code>JSON_ARRAYAGG = 484;</code>
   */
  public static final int JSON_ARRAYAGG_VALUE = 484;
  /**
   * <code>JSON_OBJECT = 485;</code>
   */
  public static final int JSON_OBJECT_VALUE = 485;
  /**
   * <code>JSON_OBJECTAGG = 486;</code>
   */
  public static final int JSON_OBJECTAGG_VALUE = 486;
  /**
   * <code>KEY = 487;</code>
   */
  public static final int KEY_VALUE = 487;
  /**
   * <code>KEYS = 488;</code>
   */
  public static final int KEYS_VALUE = 488;
  /**
   * <code>LABEL = 489;</code>
   */
  public static final int LABEL_VALUE = 489;
  /**
   * <code>LANGUAGE = 490;</code>
   */
  public static final int LANGUAGE_VALUE = 490;
  /**
   * <code>LARGE_P = 491;</code>
   */
  public static final int LARGE_P_VALUE = 491;
  /**
   * <code>LAST_P = 492;</code>
   */
  public static final int LAST_P_VALUE = 492;
  /**
   * <code>LATERAL_P = 493;</code>
   */
  public static final int LATERAL_P_VALUE = 493;
  /**
   * <code>LEADING = 494;</code>
   */
  public static final int LEADING_VALUE = 494;
  /**
   * <code>LEAKPROOF = 495;</code>
   */
  public static final int LEAKPROOF_VALUE = 495;
  /**
   * <code>LEAST = 496;</code>
   */
  public static final int LEAST_VALUE = 496;
  /**
   * <code>LEFT = 497;</code>
   */
  public static final int LEFT_VALUE = 497;
  /**
   * <code>LEVEL = 498;</code>
   */
  public static final int LEVEL_VALUE = 498;
  /**
   * <code>LIKE = 499;</code>
   */
  public static final int LIKE_VALUE = 499;
  /**
   * <code>LIMIT = 500;</code>
   */
  public static final int LIMIT_VALUE = 500;
  /**
   * <code>LISTEN = 501;</code>
   */
  public static final int LISTEN_VALUE = 501;
  /**
   * <code>LOAD = 502;</code>
   */
  public static final int LOAD_VALUE = 502;
  /**
   * <code>LOCAL = 503;</code>
   */
  public static final int LOCAL_VALUE = 503;
  /**
   * <code>LOCALTIME = 504;</code>
   */
  public static final int LOCALTIME_VALUE = 504;
  /**
   * <code>LOCALTIMESTAMP = 505;</code>
   */
  public static final int LOCALTIMESTAMP_VALUE = 505;
  /**
   * <code>LOCATION = 506;</code>
   */
  public static final int LOCATION_VALUE = 506;
  /**
   * <code>LOCK_P = 507;</code>
   */
  public static final int LOCK_P_VALUE = 507;
  /**
   * <code>LOCKED = 508;</code>
   */
  public static final int LOCKED_VALUE = 508;
  /**
   * <code>LOGGED = 509;</code>
   */
  public static final int LOGGED_VALUE = 509;
  /**
   * <code>MAPPING = 510;</code>
   */
  public static final int MAPPING_VALUE = 510;
  /**
   * <code>MATCH = 511;</code>
   */
  public static final int MATCH_VALUE = 511;
  /**
   * <code>MATCHED = 512;</code>
   */
  public static final int MATCHED_VALUE = 512;
  /**
   * <code>MATERIALIZED = 513;</code>
   */
  public static final int MATERIALIZED_VALUE = 513;
  /**
   * <code>MAXVALUE = 514;</code>
   */
  public static final int MAXVALUE_VALUE = 514;
  /**
   * <code>MERGE = 515;</code>
   */
  public static final int MERGE_VALUE = 515;
  /**
   * <code>METHOD = 516;</code>
   */
  public static final int METHOD_VALUE = 516;
  /**
   * <code>MINUTE_P = 517;</code>
   */
  public static final int MINUTE_P_VALUE = 517;
  /**
   * <code>MINVALUE = 518;</code>
   */
  public static final int MINVALUE_VALUE = 518;
  /**
   * <code>MODE = 519;</code>
   */
  public static final int MODE_VALUE = 519;
  /**
   * <code>MONTH_P = 520;</code>
   */
  public static final int MONTH_P_VALUE = 520;
  /**
   * <code>MOVE = 521;</code>
   */
  public static final int MOVE_VALUE = 521;
  /**
   * <code>NAME_P = 522;</code>
   */
  public static final int NAME_P_VALUE = 522;
  /**
   * <code>NAMES = 523;</code>
   */
  public static final int NAMES_VALUE = 523;
  /**
   * <code>NATIONAL = 524;</code>
   */
  public static final int NATIONAL_VALUE = 524;
  /**
   * <code>NATURAL = 525;</code>
   */
  public static final int NATURAL_VALUE = 525;
  /**
   * <code>NCHAR = 526;</code>
   */
  public static final int NCHAR_VALUE = 526;
  /**
   * <code>NEW = 527;</code>
   */
  public static final int NEW_VALUE = 527;
  /**
   * <code>NEXT = 528;</code>
   */
  public static final int NEXT_VALUE = 528;
  /**
   * <code>NFC = 529;</code>
   */
  public static final int NFC_VALUE = 529;
  /**
   * <code>NFD = 530;</code>
   */
  public static final int NFD_VALUE = 530;
  /**
   * <code>NFKC = 531;</code>
   */
  public static final int NFKC_VALUE = 531;
  /**
   * <code>NFKD = 532;</code>
   */
  public static final int NFKD_VALUE = 532;
  /**
   * <code>NO = 533;</code>
   */
  public static final int NO_VALUE = 533;
  /**
   * <code>NONE = 534;</code>
   */
  public static final int NONE_VALUE = 534;
  /**
   * <code>NORMALIZE = 535;</code>
   */
  public static final int NORMALIZE_VALUE = 535;
  /**
   * <code>NORMALIZED = 536;</code>
   */
  public static final int NORMALIZED_VALUE = 536;
  /**
   * <code>NOT = 537;</code>
   */
  public static final int NOT_VALUE = 537;
  /**
   * <code>NOTHING = 538;</code>
   */
  public static final int NOTHING_VALUE = 538;
  /**
   * <code>NOTIFY = 539;</code>
   */
  public static final int NOTIFY_VALUE = 539;
  /**
   * <code>NOTNULL = 540;</code>
   */
  public static final int NOTNULL_VALUE = 540;
  /**
   * <code>NOWAIT = 541;</code>
   */
  public static final int NOWAIT_VALUE = 541;
  /**
   * <code>NULL_P = 542;</code>
   */
  public static final int NULL_P_VALUE = 542;
  /**
   * <code>NULLIF = 543;</code>
   */
  public static final int NULLIF_VALUE = 543;
  /**
   * <code>NULLS_P = 544;</code>
   */
  public static final int NULLS_P_VALUE = 544;
  /**
   * <code>NUMERIC = 545;</code>
   */
  public static final int NUMERIC_VALUE = 545;
  /**
   * <code>OBJECT_P = 546;</code>
   */
  public static final int OBJECT_P_VALUE = 546;
  /**
   * <code>OF = 547;</code>
   */
  public static final int OF_VALUE = 547;
  /**
   * <code>OFF = 548;</code>
   */
  public static final int OFF_VALUE = 548;
  /**
   * <code>OFFSET = 549;</code>
   */
  public static final int OFFSET_VALUE = 549;
  /**
   * <code>OIDS = 550;</code>
   */
  public static final int OIDS_VALUE = 550;
  /**
   * <code>OLD = 551;</code>
   */
  public static final int OLD_VALUE = 551;
  /**
   * <code>ON = 552;</code>
   */
  public static final int ON_VALUE = 552;
  /**
   * <code>ONLY = 553;</code>
   */
  public static final int ONLY_VALUE = 553;
  /**
   * <code>OPERATOR = 554;</code>
   */
  public static final int OPERATOR_VALUE = 554;
  /**
   * <code>OPTION = 555;</code>
   */
  public static final int OPTION_VALUE = 555;
  /**
   * <code>OPTIONS = 556;</code>
   */
  public static final int OPTIONS_VALUE = 556;
  /**
   * <code>OR = 557;</code>
   */
  public static final int OR_VALUE = 557;
  /**
   * <code>ORDER = 558;</code>
   */
  public static final int ORDER_VALUE = 558;
  /**
   * <code>ORDINALITY = 559;</code>
   */
  public static final int ORDINALITY_VALUE = 559;
  /**
   * <code>OTHERS = 560;</code>
   */
  public static final int OTHERS_VALUE = 560;
  /**
   * <code>OUT_P = 561;</code>
   */
  public static final int OUT_P_VALUE = 561;
  /**
   * <code>OUTER_P = 562;</code>
   */
  public static final int OUTER_P_VALUE = 562;
  /**
   * <code>OVER = 563;</code>
   */
  public static final int OVER_VALUE = 563;
  /**
   * <code>OVERLAPS = 564;</code>
   */
  public static final int OVERLAPS_VALUE = 564;
  /**
   * <code>OVERLAY = 565;</code>
   */
  public static final int OVERLAY_VALUE = 565;
  /**
   * <code>OVERRIDING = 566;</code>
   */
  public static final int OVERRIDING_VALUE = 566;
  /**
   * <code>OWNED = 567;</code>
   */
  public static final int OWNED_VALUE = 567;
  /**
   * <code>OWNER = 568;</code>
   */
  public static final int OWNER_VALUE = 568;
  /**
   * <code>PARALLEL = 569;</code>
   */
  public static final int PARALLEL_VALUE = 569;
  /**
   * <code>PARAMETER = 570;</code>
   */
  public static final int PARAMETER_VALUE = 570;
  /**
   * <code>PARSER = 571;</code>
   */
  public static final int PARSER_VALUE = 571;
  /**
   * <code>PARTIAL = 572;</code>
   */
  public static final int PARTIAL_VALUE = 572;
  /**
   * <code>PARTITION = 573;</code>
   */
  public static final int PARTITION_VALUE = 573;
  /**
   * <code>PASSING = 574;</code>
   */
  public static final int PASSING_VALUE = 574;
  /**
   * <code>PASSWORD = 575;</code>
   */
  public static final int PASSWORD_VALUE = 575;
  /**
   * <code>PLACING = 576;</code>
   */
  public static final int PLACING_VALUE = 576;
  /**
   * <code>PLANS = 577;</code>
   */
  public static final int PLANS_VALUE = 577;
  /**
   * <code>POLICY = 578;</code>
   */
  public static final int POLICY_VALUE = 578;
  /**
   * <code>POSITION = 579;</code>
   */
  public static final int POSITION_VALUE = 579;
  /**
   * <code>PRECEDING = 580;</code>
   */
  public static final int PRECEDING_VALUE = 580;
  /**
   * <code>PRECISION = 581;</code>
   */
  public static final int PRECISION_VALUE = 581;
  /**
   * <code>PRESERVE = 582;</code>
   */
  public static final int PRESERVE_VALUE = 582;
  /**
   * <code>PREPARE = 583;</code>
   */
  public static final int PREPARE_VALUE = 583;
  /**
   * <code>PREPARED = 584;</code>
   */
  public static final int PREPARED_VALUE = 584;
  /**
   * <code>PRIMARY = 585;</code>
   */
  public static final int PRIMARY_VALUE = 585;
  /**
   * <code>PRIOR = 586;</code>
   */
  public static final int PRIOR_VALUE = 586;
  /**
   * <code>PRIVILEGES = 587;</code>
   */
  public static final int PRIVILEGES_VALUE = 587;
  /**
   * <code>PROCEDURAL = 588;</code>
   */
  public static final int PROCEDURAL_VALUE = 588;
  /**
   * <code>PROCEDURE = 589;</code>
   */
  public static final int PROCEDURE_VALUE = 589;
  /**
   * <code>PROCEDURES = 590;</code>
   */
  public static final int PROCEDURES_VALUE = 590;
  /**
   * <code>PROGRAM = 591;</code>
   */
  public static final int PROGRAM_VALUE = 591;
  /**
   * <code>PUBLICATION = 592;</code>
   */
  public static final int PUBLICATION_VALUE = 592;
  /**
   * <code>QUOTE = 593;</code>
   */
  public static final int QUOTE_VALUE = 593;
  /**
   * <code>RANGE = 594;</code>
   */
  public static final int RANGE_VALUE = 594;
  /**
   * <code>READ = 595;</code>
   */
  public static final int READ_VALUE = 595;
  /**
   * <code>REAL = 596;</code>
   */
  public static final int REAL_VALUE = 596;
  /**
   * <code>REASSIGN = 597;</code>
   */
  public static final int REASSIGN_VALUE = 597;
  /**
   * <code>RECHECK = 598;</code>
   */
  public static final int RECHECK_VALUE = 598;
  /**
   * <code>RECURSIVE = 599;</code>
   */
  public static final int RECURSIVE_VALUE = 599;
  /**
   * <code>REF_P = 600;</code>
   */
  public static final int REF_P_VALUE = 600;
  /**
   * <code>REFERENCES = 601;</code>
   */
  public static final int REFERENCES_VALUE = 601;
  /**
   * <code>REFERENCING = 602;</code>
   */
  public static final int REFERENCING_VALUE = 602;
  /**
   * <code>REFRESH = 603;</code>
   */
  public static final int REFRESH_VALUE = 603;
  /**
   * <code>REINDEX = 604;</code>
   */
  public static final int REINDEX_VALUE = 604;
  /**
   * <code>RELATIVE_P = 605;</code>
   */
  public static final int RELATIVE_P_VALUE = 605;
  /**
   * <code>RELEASE = 606;</code>
   */
  public static final int RELEASE_VALUE = 606;
  /**
   * <code>RENAME = 607;</code>
   */
  public static final int RENAME_VALUE = 607;
  /**
   * <code>REPEATABLE = 608;</code>
   */
  public static final int REPEATABLE_VALUE = 608;
  /**
   * <code>REPLACE = 609;</code>
   */
  public static final int REPLACE_VALUE = 609;
  /**
   * <code>REPLICA = 610;</code>
   */
  public static final int REPLICA_VALUE = 610;
  /**
   * <code>RESET = 611;</code>
   */
  public static final int RESET_VALUE = 611;
  /**
   * <code>RESTART = 612;</code>
   */
  public static final int RESTART_VALUE = 612;
  /**
   * <code>RESTRICT = 613;</code>
   */
  public static final int RESTRICT_VALUE = 613;
  /**
   * <code>RETURN = 614;</code>
   */
  public static final int RETURN_VALUE = 614;
  /**
   * <code>RETURNING = 615;</code>
   */
  public static final int RETURNING_VALUE = 615;
  /**
   * <code>RETURNS = 616;</code>
   */
  public static final int RETURNS_VALUE = 616;
  /**
   * <code>REVOKE = 617;</code>
   */
  public static final int REVOKE_VALUE = 617;
  /**
   * <code>RIGHT = 618;</code>
   */
  public static final int RIGHT_VALUE = 618;
  /**
   * <code>ROLE = 619;</code>
   */
  public static final int ROLE_VALUE = 619;
  /**
   * <code>ROLLBACK = 620;</code>
   */
  public static final int ROLLBACK_VALUE = 620;
  /**
   * <code>ROLLUP = 621;</code>
   */
  public static final int ROLLUP_VALUE = 621;
  /**
   * <code>ROUTINE = 622;</code>
   */
  public static final int ROUTINE_VALUE = 622;
  /**
   * <code>ROUTINES = 623;</code>
   */
  public static final int ROUTINES_VALUE = 623;
  /**
   * <code>ROW = 624;</code>
   */
  public static final int ROW_VALUE = 624;
  /**
   * <code>ROWS = 625;</code>
   */
  public static final int ROWS_VALUE = 625;
  /**
   * <code>RULE = 626;</code>
   */
  public static final int RULE_VALUE = 626;
  /**
   * <code>SAVEPOINT = 627;</code>
   */
  public static final int SAVEPOINT_VALUE = 627;
  /**
   * <code>SCALAR = 628;</code>
   */
  public static final int SCALAR_VALUE = 628;
  /**
   * <code>SCHEMA = 629;</code>
   */
  public static final int SCHEMA_VALUE = 629;
  /**
   * <code>SCHEMAS = 630;</code>
   */
  public static final int SCHEMAS_VALUE = 630;
  /**
   * <code>SCROLL = 631;</code>
   */
  public static final int SCROLL_VALUE = 631;
  /**
   * <code>SEARCH = 632;</code>
   */
  public static final int SEARCH_VALUE = 632;
  /**
   * <code>SECOND_P = 633;</code>
   */
  public static final int SECOND_P_VALUE = 633;
  /**
   * <code>SECURITY = 634;</code>
   */
  public static final int SECURITY_VALUE = 634;
  /**
   * <code>SELECT = 635;</code>
   */
  public static final int SELECT_VALUE = 635;
  /**
   * <code>SEQUENCE = 636;</code>
   */
  public static final int SEQUENCE_VALUE = 636;
  /**
   * <code>SEQUENCES = 637;</code>
   */
  public static final int SEQUENCES_VALUE = 637;
  /**
   * <code>SERIALIZABLE = 638;</code>
   */
  public static final int SERIALIZABLE_VALUE = 638;
  /**
   * <code>SERVER = 639;</code>
   */
  public static final int SERVER_VALUE = 639;
  /**
   * <code>SESSION = 640;</code>
   */
  public static final int SESSION_VALUE = 640;
  /**
   * <code>SESSION_USER = 641;</code>
   */
  public static final int SESSION_USER_VALUE = 641;
  /**
   * <code>SET = 642;</code>
   */
  public static final int SET_VALUE = 642;
  /**
   * <code>SETS = 643;</code>
   */
  public static final int SETS_VALUE = 643;
  /**
   * <code>SETOF = 644;</code>
   */
  public static final int SETOF_VALUE = 644;
  /**
   * <code>SHARE = 645;</code>
   */
  public static final int SHARE_VALUE = 645;
  /**
   * <code>SHOW = 646;</code>
   */
  public static final int SHOW_VALUE = 646;
  /**
   * <code>SIMILAR = 647;</code>
   */
  public static final int SIMILAR_VALUE = 647;
  /**
   * <code>SIMPLE = 648;</code>
   */
  public static final int SIMPLE_VALUE = 648;
  /**
   * <code>SKIP = 649;</code>
   */
  public static final int SKIP_VALUE = 649;
  /**
   * <code>SMALLINT = 650;</code>
   */
  public static final int SMALLINT_VALUE = 650;
  /**
   * <code>SNAPSHOT = 651;</code>
   */
  public static final int SNAPSHOT_VALUE = 651;
  /**
   * <code>SOME = 652;</code>
   */
  public static final int SOME_VALUE = 652;
  /**
   * <code>SQL_P = 653;</code>
   */
  public static final int SQL_P_VALUE = 653;
  /**
   * <code>STABLE = 654;</code>
   */
  public static final int STABLE_VALUE = 654;
  /**
   * <code>STANDALONE_P = 655;</code>
   */
  public static final int STANDALONE_P_VALUE = 655;
  /**
   * <code>START = 656;</code>
   */
  public static final int START_VALUE = 656;
  /**
   * <code>STATEMENT = 657;</code>
   */
  public static final int STATEMENT_VALUE = 657;
  /**
   * <code>STATISTICS = 658;</code>
   */
  public static final int STATISTICS_VALUE = 658;
  /**
   * <code>STDIN = 659;</code>
   */
  public static final int STDIN_VALUE = 659;
  /**
   * <code>STDOUT = 660;</code>
   */
  public static final int STDOUT_VALUE = 660;
  /**
   * <code>STORAGE = 661;</code>
   */
  public static final int STORAGE_VALUE = 661;
  /**
   * <code>STORED = 662;</code>
   */
  public static final int STORED_VALUE = 662;
  /**
   * <code>STRICT_P = 663;</code>
   */
  public static final int STRICT_P_VALUE = 663;
  /**
   * <code>STRIP_P = 664;</code>
   */
  public static final int STRIP_P_VALUE = 664;
  /**
   * <code>SUBSCRIPTION = 665;</code>
   */
  public static final int SUBSCRIPTION_VALUE = 665;
  /**
   * <code>SUBSTRING = 666;</code>
   */
  public static final int SUBSTRING_VALUE = 666;
  /**
   * <code>SUPPORT = 667;</code>
   */
  public static final int SUPPORT_VALUE = 667;
  /**
   * <code>SYMMETRIC = 668;</code>
   */
  public static final int SYMMETRIC_VALUE = 668;
  /**
   * <code>SYSID = 669;</code>
   */
  public static final int SYSID_VALUE = 669;
  /**
   * <code>SYSTEM_P = 670;</code>
   */
  public static final int SYSTEM_P_VALUE = 670;
  /**
   * <code>SYSTEM_USER = 671;</code>
   */
  public static final int SYSTEM_USER_VALUE = 671;
  /**
   * <code>TABLE = 672;</code>
   */
  public static final int TABLE_VALUE = 672;
  /**
   * <code>TABLES = 673;</code>
   */
  public static final int TABLES_VALUE = 673;
  /**
   * <code>TABLESAMPLE = 674;</code>
   */
  public static final int TABLESAMPLE_VALUE = 674;
  /**
   * <code>TABLESPACE = 675;</code>
   */
  public static final int TABLESPACE_VALUE = 675;
  /**
   * <code>TEMP = 676;</code>
   */
  public static final int TEMP_VALUE = 676;
  /**
   * <code>TEMPLATE = 677;</code>
   */
  public static final int TEMPLATE_VALUE = 677;
  /**
   * <code>TEMPORARY = 678;</code>
   */
  public static final int TEMPORARY_VALUE = 678;
  /**
   * <code>TEXT_P = 679;</code>
   */
  public static final int TEXT_P_VALUE = 679;
  /**
   * <code>THEN = 680;</code>
   */
  public static final int THEN_VALUE = 680;
  /**
   * <code>TIES = 681;</code>
   */
  public static final int TIES_VALUE = 681;
  /**
   * <code>TIME = 682;</code>
   */
  public static final int TIME_VALUE = 682;
  /**
   * <code>TIMESTAMP = 683;</code>
   */
  public static final int TIMESTAMP_VALUE = 683;
  /**
   * <code>TO = 684;</code>
   */
  public static final int TO_VALUE = 684;
  /**
   * <code>TRAILING = 685;</code>
   */
  public static final int TRAILING_VALUE = 685;
  /**
   * <code>TRANSACTION = 686;</code>
   */
  public static final int TRANSACTION_VALUE = 686;
  /**
   * <code>TRANSFORM = 687;</code>
   */
  public static final int TRANSFORM_VALUE = 687;
  /**
   * <code>TREAT = 688;</code>
   */
  public static final int TREAT_VALUE = 688;
  /**
   * <code>TRIGGER = 689;</code>
   */
  public static final int TRIGGER_VALUE = 689;
  /**
   * <code>TRIM = 690;</code>
   */
  public static final int TRIM_VALUE = 690;
  /**
   * <code>TRUE_P = 691;</code>
   */
  public static final int TRUE_P_VALUE = 691;
  /**
   * <code>TRUNCATE = 692;</code>
   */
  public static final int TRUNCATE_VALUE = 692;
  /**
   * <code>TRUSTED = 693;</code>
   */
  public static final int TRUSTED_VALUE = 693;
  /**
   * <code>TYPE_P = 694;</code>
   */
  public static final int TYPE_P_VALUE = 694;
  /**
   * <code>TYPES_P = 695;</code>
   */
  public static final int TYPES_P_VALUE = 695;
  /**
   * <code>UESCAPE = 696;</code>
   */
  public static final int UESCAPE_VALUE = 696;
  /**
   * <code>UNBOUNDED = 697;</code>
   */
  public static final int UNBOUNDED_VALUE = 697;
  /**
   * <code>UNCOMMITTED = 698;</code>
   */
  public static final int UNCOMMITTED_VALUE = 698;
  /**
   * <code>UNENCRYPTED = 699;</code>
   */
  public static final int UNENCRYPTED_VALUE = 699;
  /**
   * <code>UNION = 700;</code>
   */
  public static final int UNION_VALUE = 700;
  /**
   * <code>UNIQUE = 701;</code>
   */
  public static final int UNIQUE_VALUE = 701;
  /**
   * <code>UNKNOWN = 702;</code>
   */
  public static final int UNKNOWN_VALUE = 702;
  /**
   * <code>UNLISTEN = 703;</code>
   */
  public static final int UNLISTEN_VALUE = 703;
  /**
   * <code>UNLOGGED = 704;</code>
   */
  public static final int UNLOGGED_VALUE = 704;
  /**
   * <code>UNTIL = 705;</code>
   */
  public static final int UNTIL_VALUE = 705;
  /**
   * <code>UPDATE = 706;</code>
   */
  public static final int UPDATE_VALUE = 706;
  /**
   * <code>USER = 707;</code>
   */
  public static final int USER_VALUE = 707;
  /**
   * <code>USING = 708;</code>
   */
  public static final int USING_VALUE = 708;
  /**
   * <code>VACUUM = 709;</code>
   */
  public static final int VACUUM_VALUE = 709;
  /**
   * <code>VALID = 710;</code>
   */
  public static final int VALID_VALUE = 710;
  /**
   * <code>VALIDATE = 711;</code>
   */
  public static final int VALIDATE_VALUE = 711;
  /**
   * <code>VALIDATOR = 712;</code>
   */
  public static final int VALIDATOR_VALUE = 712;
  /**
   * <code>VALUE_P = 713;</code>
   */
  public static final int VALUE_P_VALUE = 713;
  /**
   * <code>VALUES = 714;</code>
   */
  public static final int VALUES_VALUE = 714;
  /**
   * <code>VARCHAR = 715;</code>
   */
  public static final int VARCHAR_VALUE = 715;
  /**
   * <code>VARIADIC = 716;</code>
   */
  public static final int VARIADIC_VALUE = 716;
  /**
   * <code>VARYING = 717;</code>
   */
  public static final int VARYING_VALUE = 717;
  /**
   * <code>VERBOSE = 718;</code>
   */
  public static final int VERBOSE_VALUE = 718;
  /**
   * <code>VERSION_P = 719;</code>
   */
  public static final int VERSION_P_VALUE = 719;
  /**
   * <code>VIEW = 720;</code>
   */
  public static final int VIEW_VALUE = 720;
  /**
   * <code>VIEWS = 721;</code>
   */
  public static final int VIEWS_VALUE = 721;
  /**
   * <code>VOLATILE = 722;</code>
   */
  public static final int VOLATILE_VALUE = 722;
  /**
   * <code>WHEN = 723;</code>
   */
  public static final int WHEN_VALUE = 723;
  /**
   * <code>WHERE = 724;</code>
   */
  public static final int WHERE_VALUE = 724;
  /**
   * <code>WHITESPACE_P = 725;</code>
   */
  public static final int WHITESPACE_P_VALUE = 725;
  /**
   * <code>WINDOW = 726;</code>
   */
  public static final int WINDOW_VALUE = 726;
  /**
   * <code>WITH = 727;</code>
   */
  public static final int WITH_VALUE = 727;
  /**
   * <code>WITHIN = 728;</code>
   */
  public static final int WITHIN_VALUE = 728;
  /**
   * <code>WITHOUT = 729;</code>
   */
  public static final int WITHOUT_VALUE = 729;
  /**
   * <code>WORK = 730;</code>
   */
  public static final int WORK_VALUE = 730;
  /**
   * <code>WRAPPER = 731;</code>
   */
  public static final int WRAPPER_VALUE = 731;
  /**
   * <code>WRITE = 732;</code>
   */
  public static final int WRITE_VALUE = 732;
  /**
   * <code>XML_P = 733;</code>
   */
  public static final int XML_P_VALUE = 733;
  /**
   * <code>XMLATTRIBUTES = 734;</code>
   */
  public static final int XMLATTRIBUTES_VALUE = 734;
  /**
   * <code>XMLCONCAT = 735;</code>
   */
  public static final int XMLCONCAT_VALUE = 735;
  /**
   * <code>XMLELEMENT = 736;</code>
   */
  public static final int XMLELEMENT_VALUE = 736;
  /**
   * <code>XMLEXISTS = 737;</code>
   */
  public static final int XMLEXISTS_VALUE = 737;
  /**
   * <code>XMLFOREST = 738;</code>
   */
  public static final int XMLFOREST_VALUE = 738;
  /**
   * <code>XMLNAMESPACES = 739;</code>
   */
  public static final int XMLNAMESPACES_VALUE = 739;
  /**
   * <code>XMLPARSE = 740;</code>
   */
  public static final int XMLPARSE_VALUE = 740;
  /**
   * <code>XMLPI = 741;</code>
   */
  public static final int XMLPI_VALUE = 741;
  /**
   * <code>XMLROOT = 742;</code>
   */
  public static final int XMLROOT_VALUE = 742;
  /**
   * <code>XMLSERIALIZE = 743;</code>
   */
  public static final int XMLSERIALIZE_VALUE = 743;
  /**
   * <code>XMLTABLE = 744;</code>
   */
  public static final int XMLTABLE_VALUE = 744;
  /**
   * <code>YEAR_P = 745;</code>
   */
  public static final int YEAR_P_VALUE = 745;
  /**
   * <code>YES_P = 746;</code>
   */
  public static final int YES_P_VALUE = 746;
  /**
   * <code>ZONE = 747;</code>
   */
  public static final int ZONE_VALUE = 747;
  /**
   * <code>FORMAT_LA = 748;</code>
   */
  public static final int FORMAT_LA_VALUE = 748;
  /**
   * <code>NOT_LA = 749;</code>
   */
  public static final int NOT_LA_VALUE = 749;
  /**
   * <code>NULLS_LA = 750;</code>
   */
  public static final int NULLS_LA_VALUE = 750;
  /**
   * <code>WITH_LA = 751;</code>
   */
  public static final int WITH_LA_VALUE = 751;
  /**
   * <code>WITHOUT_LA = 752;</code>
   */
  public static final int WITHOUT_LA_VALUE = 752;
  /**
   * <code>MODE_TYPE_NAME = 753;</code>
   */
  public static final int MODE_TYPE_NAME_VALUE = 753;
  /**
   * <code>MODE_PLPGSQL_EXPR = 754;</code>
   */
  public static final int MODE_PLPGSQL_EXPR_VALUE = 754;
  /**
   * <code>MODE_PLPGSQL_ASSIGN1 = 755;</code>
   */
  public static final int MODE_PLPGSQL_ASSIGN1_VALUE = 755;
  /**
   * <code>MODE_PLPGSQL_ASSIGN2 = 756;</code>
   */
  public static final int MODE_PLPGSQL_ASSIGN2_VALUE = 756;
  /**
   * <code>MODE_PLPGSQL_ASSIGN3 = 757;</code>
   */
  public static final int MODE_PLPGSQL_ASSIGN3_VALUE = 757;
  /**
   * <code>UMINUS = 758;</code>
   */
  public static final int UMINUS_VALUE = 758;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Token valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Token forNumber(int value) {
    switch (value) {
      case 0: return NUL;
      case 36: return ASCII_36;
      case 37: return ASCII_37;
      case 40: return ASCII_40;
      case 41: return ASCII_41;
      case 42: return ASCII_42;
      case 43: return ASCII_43;
      case 44: return ASCII_44;
      case 45: return ASCII_45;
      case 46: return ASCII_46;
      case 47: return ASCII_47;
      case 58: return ASCII_58;
      case 59: return ASCII_59;
      case 60: return ASCII_60;
      case 61: return ASCII_61;
      case 62: return ASCII_62;
      case 63: return ASCII_63;
      case 91: return ASCII_91;
      case 92: return ASCII_92;
      case 93: return ASCII_93;
      case 94: return ASCII_94;
      case 258: return IDENT;
      case 259: return UIDENT;
      case 260: return FCONST;
      case 261: return SCONST;
      case 262: return USCONST;
      case 263: return BCONST;
      case 264: return XCONST;
      case 265: return Op;
      case 266: return ICONST;
      case 267: return PARAM;
      case 268: return TYPECAST;
      case 269: return DOT_DOT;
      case 270: return COLON_EQUALS;
      case 271: return EQUALS_GREATER;
      case 272: return LESS_EQUALS;
      case 273: return GREATER_EQUALS;
      case 274: return NOT_EQUALS;
      case 275: return SQL_COMMENT;
      case 276: return C_COMMENT;
      case 277: return ABORT_P;
      case 278: return ABSENT;
      case 279: return ABSOLUTE_P;
      case 280: return ACCESS;
      case 281: return ACTION;
      case 282: return ADD_P;
      case 283: return ADMIN;
      case 284: return AFTER;
      case 285: return AGGREGATE;
      case 286: return ALL;
      case 287: return ALSO;
      case 288: return ALTER;
      case 289: return ALWAYS;
      case 290: return ANALYSE;
      case 291: return ANALYZE;
      case 292: return AND;
      case 293: return ANY;
      case 294: return ARRAY;
      case 295: return AS;
      case 296: return ASC;
      case 297: return ASENSITIVE;
      case 298: return ASSERTION;
      case 299: return ASSIGNMENT;
      case 300: return ASYMMETRIC;
      case 301: return ATOMIC;
      case 302: return AT;
      case 303: return ATTACH;
      case 304: return ATTRIBUTE;
      case 305: return AUTHORIZATION;
      case 306: return BACKWARD;
      case 307: return BEFORE;
      case 308: return BEGIN_P;
      case 309: return BETWEEN;
      case 310: return BIGINT;
      case 311: return BINARY;
      case 312: return BIT;
      case 313: return BOOLEAN_P;
      case 314: return BOTH;
      case 315: return BREADTH;
      case 316: return BY;
      case 317: return CACHE;
      case 318: return CALL;
      case 319: return CALLED;
      case 320: return CASCADE;
      case 321: return CASCADED;
      case 322: return CASE;
      case 323: return CAST;
      case 324: return CATALOG_P;
      case 325: return CHAIN;
      case 326: return CHAR_P;
      case 327: return CHARACTER;
      case 328: return CHARACTERISTICS;
      case 329: return CHECK;
      case 330: return CHECKPOINT;
      case 331: return CLASS;
      case 332: return CLOSE;
      case 333: return CLUSTER;
      case 334: return COALESCE;
      case 335: return COLLATE;
      case 336: return COLLATION;
      case 337: return COLUMN;
      case 338: return COLUMNS;
      case 339: return COMMENT;
      case 340: return COMMENTS;
      case 341: return COMMIT;
      case 342: return COMMITTED;
      case 343: return COMPRESSION;
      case 344: return CONCURRENTLY;
      case 345: return CONFIGURATION;
      case 346: return CONFLICT;
      case 347: return CONNECTION;
      case 348: return CONSTRAINT;
      case 349: return CONSTRAINTS;
      case 350: return CONTENT_P;
      case 351: return CONTINUE_P;
      case 352: return CONVERSION_P;
      case 353: return COPY;
      case 354: return COST;
      case 355: return CREATE;
      case 356: return CROSS;
      case 357: return CSV;
      case 358: return CUBE;
      case 359: return CURRENT_P;
      case 360: return CURRENT_CATALOG;
      case 361: return CURRENT_DATE;
      case 362: return CURRENT_ROLE;
      case 363: return CURRENT_SCHEMA;
      case 364: return CURRENT_TIME;
      case 365: return CURRENT_TIMESTAMP;
      case 366: return CURRENT_USER;
      case 367: return CURSOR;
      case 368: return CYCLE;
      case 369: return DATA_P;
      case 370: return DATABASE;
      case 371: return DAY_P;
      case 372: return DEALLOCATE;
      case 373: return DEC;
      case 374: return DECIMAL_P;
      case 375: return DECLARE;
      case 376: return DEFAULT;
      case 377: return DEFAULTS;
      case 378: return DEFERRABLE;
      case 379: return DEFERRED;
      case 380: return DEFINER;
      case 381: return DELETE_P;
      case 382: return DELIMITER;
      case 383: return DELIMITERS;
      case 384: return DEPENDS;
      case 385: return DEPTH;
      case 386: return DESC;
      case 387: return DETACH;
      case 388: return DICTIONARY;
      case 389: return DISABLE_P;
      case 390: return DISCARD;
      case 391: return DISTINCT;
      case 392: return DO;
      case 393: return DOCUMENT_P;
      case 394: return DOMAIN_P;
      case 395: return DOUBLE_P;
      case 396: return DROP;
      case 397: return EACH;
      case 398: return ELSE;
      case 399: return ENABLE_P;
      case 400: return ENCODING;
      case 401: return ENCRYPTED;
      case 402: return END_P;
      case 403: return ENUM_P;
      case 404: return ESCAPE;
      case 405: return EVENT;
      case 406: return EXCEPT;
      case 407: return EXCLUDE;
      case 408: return EXCLUDING;
      case 409: return EXCLUSIVE;
      case 410: return EXECUTE;
      case 411: return EXISTS;
      case 412: return EXPLAIN;
      case 413: return EXPRESSION;
      case 414: return EXTENSION;
      case 415: return EXTERNAL;
      case 416: return EXTRACT;
      case 417: return FALSE_P;
      case 418: return FAMILY;
      case 419: return FETCH;
      case 420: return FILTER;
      case 421: return FINALIZE;
      case 422: return FIRST_P;
      case 423: return FLOAT_P;
      case 424: return FOLLOWING;
      case 425: return FOR;
      case 426: return FORCE;
      case 427: return FOREIGN;
      case 428: return FORMAT;
      case 429: return FORWARD;
      case 430: return FREEZE;
      case 431: return FROM;
      case 432: return FULL;
      case 433: return FUNCTION;
      case 434: return FUNCTIONS;
      case 435: return GENERATED;
      case 436: return GLOBAL;
      case 437: return GRANT;
      case 438: return GRANTED;
      case 439: return GREATEST;
      case 440: return GROUP_P;
      case 441: return GROUPING;
      case 442: return GROUPS;
      case 443: return HANDLER;
      case 444: return HAVING;
      case 445: return HEADER_P;
      case 446: return HOLD;
      case 447: return HOUR_P;
      case 448: return IDENTITY_P;
      case 449: return IF_P;
      case 450: return ILIKE;
      case 451: return IMMEDIATE;
      case 452: return IMMUTABLE;
      case 453: return IMPLICIT_P;
      case 454: return IMPORT_P;
      case 455: return IN_P;
      case 456: return INCLUDE;
      case 457: return INCLUDING;
      case 458: return INCREMENT;
      case 459: return INDENT;
      case 460: return INDEX;
      case 461: return INDEXES;
      case 462: return INHERIT;
      case 463: return INHERITS;
      case 464: return INITIALLY;
      case 465: return INLINE_P;
      case 466: return INNER_P;
      case 467: return INOUT;
      case 468: return INPUT_P;
      case 469: return INSENSITIVE;
      case 470: return INSERT;
      case 471: return INSTEAD;
      case 472: return INT_P;
      case 473: return INTEGER;
      case 474: return INTERSECT;
      case 475: return INTERVAL;
      case 476: return INTO;
      case 477: return INVOKER;
      case 478: return IS;
      case 479: return ISNULL;
      case 480: return ISOLATION;
      case 481: return JOIN;
      case 482: return JSON;
      case 483: return JSON_ARRAY;
      case 484: return JSON_ARRAYAGG;
      case 485: return JSON_OBJECT;
      case 486: return JSON_OBJECTAGG;
      case 487: return KEY;
      case 488: return KEYS;
      case 489: return LABEL;
      case 490: return LANGUAGE;
      case 491: return LARGE_P;
      case 492: return LAST_P;
      case 493: return LATERAL_P;
      case 494: return LEADING;
      case 495: return LEAKPROOF;
      case 496: return LEAST;
      case 497: return LEFT;
      case 498: return LEVEL;
      case 499: return LIKE;
      case 500: return LIMIT;
      case 501: return LISTEN;
      case 502: return LOAD;
      case 503: return LOCAL;
      case 504: return LOCALTIME;
      case 505: return LOCALTIMESTAMP;
      case 506: return LOCATION;
      case 507: return LOCK_P;
      case 508: return LOCKED;
      case 509: return LOGGED;
      case 510: return MAPPING;
      case 511: return MATCH;
      case 512: return MATCHED;
      case 513: return MATERIALIZED;
      case 514: return MAXVALUE;
      case 515: return MERGE;
      case 516: return METHOD;
      case 517: return MINUTE_P;
      case 518: return MINVALUE;
      case 519: return MODE;
      case 520: return MONTH_P;
      case 521: return MOVE;
      case 522: return NAME_P;
      case 523: return NAMES;
      case 524: return NATIONAL;
      case 525: return NATURAL;
      case 526: return NCHAR;
      case 527: return NEW;
      case 528: return NEXT;
      case 529: return NFC;
      case 530: return NFD;
      case 531: return NFKC;
      case 532: return NFKD;
      case 533: return NO;
      case 534: return NONE;
      case 535: return NORMALIZE;
      case 536: return NORMALIZED;
      case 537: return NOT;
      case 538: return NOTHING;
      case 539: return NOTIFY;
      case 540: return NOTNULL;
      case 541: return NOWAIT;
      case 542: return NULL_P;
      case 543: return NULLIF;
      case 544: return NULLS_P;
      case 545: return NUMERIC;
      case 546: return OBJECT_P;
      case 547: return OF;
      case 548: return OFF;
      case 549: return OFFSET;
      case 550: return OIDS;
      case 551: return OLD;
      case 552: return ON;
      case 553: return ONLY;
      case 554: return OPERATOR;
      case 555: return OPTION;
      case 556: return OPTIONS;
      case 557: return OR;
      case 558: return ORDER;
      case 559: return ORDINALITY;
      case 560: return OTHERS;
      case 561: return OUT_P;
      case 562: return OUTER_P;
      case 563: return OVER;
      case 564: return OVERLAPS;
      case 565: return OVERLAY;
      case 566: return OVERRIDING;
      case 567: return OWNED;
      case 568: return OWNER;
      case 569: return PARALLEL;
      case 570: return PARAMETER;
      case 571: return PARSER;
      case 572: return PARTIAL;
      case 573: return PARTITION;
      case 574: return PASSING;
      case 575: return PASSWORD;
      case 576: return PLACING;
      case 577: return PLANS;
      case 578: return POLICY;
      case 579: return POSITION;
      case 580: return PRECEDING;
      case 581: return PRECISION;
      case 582: return PRESERVE;
      case 583: return PREPARE;
      case 584: return PREPARED;
      case 585: return PRIMARY;
      case 586: return PRIOR;
      case 587: return PRIVILEGES;
      case 588: return PROCEDURAL;
      case 589: return PROCEDURE;
      case 590: return PROCEDURES;
      case 591: return PROGRAM;
      case 592: return PUBLICATION;
      case 593: return QUOTE;
      case 594: return RANGE;
      case 595: return READ;
      case 596: return REAL;
      case 597: return REASSIGN;
      case 598: return RECHECK;
      case 599: return RECURSIVE;
      case 600: return REF_P;
      case 601: return REFERENCES;
      case 602: return REFERENCING;
      case 603: return REFRESH;
      case 604: return REINDEX;
      case 605: return RELATIVE_P;
      case 606: return RELEASE;
      case 607: return RENAME;
      case 608: return REPEATABLE;
      case 609: return REPLACE;
      case 610: return REPLICA;
      case 611: return RESET;
      case 612: return RESTART;
      case 613: return RESTRICT;
      case 614: return RETURN;
      case 615: return RETURNING;
      case 616: return RETURNS;
      case 617: return REVOKE;
      case 618: return RIGHT;
      case 619: return ROLE;
      case 620: return ROLLBACK;
      case 621: return ROLLUP;
      case 622: return ROUTINE;
      case 623: return ROUTINES;
      case 624: return ROW;
      case 625: return ROWS;
      case 626: return RULE;
      case 627: return SAVEPOINT;
      case 628: return SCALAR;
      case 629: return SCHEMA;
      case 630: return SCHEMAS;
      case 631: return SCROLL;
      case 632: return SEARCH;
      case 633: return SECOND_P;
      case 634: return SECURITY;
      case 635: return SELECT;
      case 636: return SEQUENCE;
      case 637: return SEQUENCES;
      case 638: return SERIALIZABLE;
      case 639: return SERVER;
      case 640: return SESSION;
      case 641: return SESSION_USER;
      case 642: return SET;
      case 643: return SETS;
      case 644: return SETOF;
      case 645: return SHARE;
      case 646: return SHOW;
      case 647: return SIMILAR;
      case 648: return SIMPLE;
      case 649: return SKIP;
      case 650: return SMALLINT;
      case 651: return SNAPSHOT;
      case 652: return SOME;
      case 653: return SQL_P;
      case 654: return STABLE;
      case 655: return STANDALONE_P;
      case 656: return START;
      case 657: return STATEMENT;
      case 658: return STATISTICS;
      case 659: return STDIN;
      case 660: return STDOUT;
      case 661: return STORAGE;
      case 662: return STORED;
      case 663: return STRICT_P;
      case 664: return STRIP_P;
      case 665: return SUBSCRIPTION;
      case 666: return SUBSTRING;
      case 667: return SUPPORT;
      case 668: return SYMMETRIC;
      case 669: return SYSID;
      case 670: return SYSTEM_P;
      case 671: return SYSTEM_USER;
      case 672: return TABLE;
      case 673: return TABLES;
      case 674: return TABLESAMPLE;
      case 675: return TABLESPACE;
      case 676: return TEMP;
      case 677: return TEMPLATE;
      case 678: return TEMPORARY;
      case 679: return TEXT_P;
      case 680: return THEN;
      case 681: return TIES;
      case 682: return TIME;
      case 683: return TIMESTAMP;
      case 684: return TO;
      case 685: return TRAILING;
      case 686: return TRANSACTION;
      case 687: return TRANSFORM;
      case 688: return TREAT;
      case 689: return TRIGGER;
      case 690: return TRIM;
      case 691: return TRUE_P;
      case 692: return TRUNCATE;
      case 693: return TRUSTED;
      case 694: return TYPE_P;
      case 695: return TYPES_P;
      case 696: return UESCAPE;
      case 697: return UNBOUNDED;
      case 698: return UNCOMMITTED;
      case 699: return UNENCRYPTED;
      case 700: return UNION;
      case 701: return UNIQUE;
      case 702: return UNKNOWN;
      case 703: return UNLISTEN;
      case 704: return UNLOGGED;
      case 705: return UNTIL;
      case 706: return UPDATE;
      case 707: return USER;
      case 708: return USING;
      case 709: return VACUUM;
      case 710: return VALID;
      case 711: return VALIDATE;
      case 712: return VALIDATOR;
      case 713: return VALUE_P;
      case 714: return VALUES;
      case 715: return VARCHAR;
      case 716: return VARIADIC;
      case 717: return VARYING;
      case 718: return VERBOSE;
      case 719: return VERSION_P;
      case 720: return VIEW;
      case 721: return VIEWS;
      case 722: return VOLATILE;
      case 723: return WHEN;
      case 724: return WHERE;
      case 725: return WHITESPACE_P;
      case 726: return WINDOW;
      case 727: return WITH;
      case 728: return WITHIN;
      case 729: return WITHOUT;
      case 730: return WORK;
      case 731: return WRAPPER;
      case 732: return WRITE;
      case 733: return XML_P;
      case 734: return XMLATTRIBUTES;
      case 735: return XMLCONCAT;
      case 736: return XMLELEMENT;
      case 737: return XMLEXISTS;
      case 738: return XMLFOREST;
      case 739: return XMLNAMESPACES;
      case 740: return XMLPARSE;
      case 741: return XMLPI;
      case 742: return XMLROOT;
      case 743: return XMLSERIALIZE;
      case 744: return XMLTABLE;
      case 745: return YEAR_P;
      case 746: return YES_P;
      case 747: return ZONE;
      case 748: return FORMAT_LA;
      case 749: return NOT_LA;
      case 750: return NULLS_LA;
      case 751: return WITH_LA;
      case 752: return WITHOUT_LA;
      case 753: return MODE_TYPE_NAME;
      case 754: return MODE_PLPGSQL_EXPR;
      case 755: return MODE_PLPGSQL_ASSIGN1;
      case 756: return MODE_PLPGSQL_ASSIGN2;
      case 757: return MODE_PLPGSQL_ASSIGN3;
      case 758: return UMINUS;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Token>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Token> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Token>() {
          public Token findValueByNumber(int number) {
            return Token.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.premiumminds.sonar.postgres.protobuf.PgQuery.getDescriptor().getEnumTypes().get(63);
  }

  private static final Token[] INTERNAL_VALUES = values();

  public static Token valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return INTERNAL_VALUES[desc.getIndex()];
  }

  private final int value;

  private Token(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:pg_query.Token)
}

